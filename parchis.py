
from copy import deepcopy
import random
import time
from math import sqrt
from numpy import log



    
def copia_tablero(tablero2):
    tablero1 = {}
    j=0
    cont = 0
    for i in tablero2:
        cont += 1
        if i =="Am" or i =="R" or i == "Az" or i == "V":
          while j < 4:
              if tablero2[i] == j:
                  break
              j += 1
          tablero1[i] = j
          j = 0
        elif i =="Am8":
            tablero1[i] = [0,0,0,0]
            while tablero2[i][j] != 0:
                tablero1[i][j] = "Am"
                j += 1
                if  j == 4:
                    break
            j = 0
        elif i =="R8":
            tablero1[i] = [0,0,0,0]
            while tablero2[i][j] != 0:
                tablero1[i][j] = "R"
                j += 1
                if  j == 4:
                    break
            j = 0
        elif i == "Az8":
            tablero1[i] = [0,0,0,0]
            while tablero2[i][j] != 0:
                tablero1[i][j] = "Az"
                j += 1
                if  j == 4:
                    break
            j = 0
        elif i == "V8":
            tablero1[i] = [0,0,0,0]
            while tablero2[i][j] != 0:
                tablero1[i][j] = "V"
                j += 1
                if  j == 4:
                    break
            j = 0
        else:
            tablero1[i] = [0,0]
            for k in [0,1]:
                if tablero2[i][k] == "Am":
                    tablero1[i][k] = "Am"
                elif tablero2[i][k] == "R":
                    tablero1[i][k] = "R"
                elif tablero2[i][k] == "Az":
                    tablero1[i][k] = "Az"
                elif tablero2[i][k] == "V":
                    tablero1[i][k] = "V"
    return tablero1

tablero_inicial = {1: [0,0],2: [0,0],3: [0,0],4: [0,0],5: [0,0],6: [0,0],
                   7: [0,0],8: [0,0],9: [0,0],10: [0,0],11: [0,0],12: [0,0],
                   13: [0,0],14: [0,0],15: [0,0],16: [0,0],17: [0,0],18: [0,0],
                   19: [0,0],20: [0,0],21: [0,0],22: [0,0],23: [0,0],
                   24: [0,0],25: [0,0],26: [0,0],27: [0,0],28: [0,0],29: [0,0],
                   30: [0,0],31: [0,0],32: [0,0],33: [0,0],34: [0,0],35: [0,0],
                   36: [0,0],37: [0,0],38: [0,0],39: [0,0],40: [0,0],
                   41: [0,0],42: [0,0],43: [0,0],44: [0,0],45: [0,0],46: [0,0],
                   47: [0,0],48: [0,0],49: [0,0],50: [0,0],51: [0,0],52: [0,0],
                   53: [0,0],54: [0,0],55: [0,0],56: [0,0],57: [0,0],
                   58: [0,0],59: [0,0],60: [0,0],61: [0,0],62: [0,0],63: [0,0],
                   64: [0,0],65: [0,0],66: [0,0],67: [0,0],68: [0,0],
                   'Am1':[0,0],'Am2':[0,0],'Am3':[0,0],'Am4':[0,0],'Am5':[0,0],
                   'Am6':[0,0],'Am7':[0,0],'Am8':[0,0,0,0],'Az1':[0,0],'Az2':[0,0],
                   'Az3':[0,0],'Az4':[0,0],'Az5':[0,0],'Az6':[0,0],'Az7':[0,0],
                   'Az8':[0,0,0,0],'R1':[0,0],'R2':[0,0],'R3':[0,0],'R4':[0,0],
                   'R5':[0,0],'R6':[0,0],'R7':[0,0],'R8':[0,0,0,0],'V1':[0,0],
                   'V2':[0,0],'V3':[0,0],'V4':[0,0],'V5':[0,0],'V6':[0,0],
                   'V7':[0,0],'V8':[0,0,0,0],'Am':4,'Az':4,'R':4,'V':4}

tablero_2 = {1: [0,0],2: [0,0],3: [0,0],4: [0,0],5: ['Am','Am'],6: [0,0],
                   7: [0,0],8: [0,0],9: [0,0],10: [0,0],11: [0,0],12: [0,0],
                   13: [0,0],14: [0,0],15: [0,0],16: [0,0],17: [0,0],18: [0,0],
                   19: [0,0],20: [0,0],21: [0,0],22: ['Az','Az'],23: [0,0],
                   24: [0,0],25: [0,0],26: [0,0],27: [0,0],28: [0,0],29: [0,0],
                   30: [0,0],31: [0,0],32: [0,0],33: [0,0],34: [0,0],35: [0,0],
                   36: [0,0],37: [0,0],38: [0,0],39: ['R','R'],40: [0,0],
                   41: [0,0],42: [0,0],43: [0,0],44: [0,0],45: [0,0],46: [0,0],
                   47: [0,0],48: [0,0],49: [0,0],50: [0,0],51: [0,0],52: [0,0],
                   53: [0,0],54: [0,0],55: [0,0],56: ['V', 'V'],57: [0,0],
                   58: [0,0],59: [0,0],60: [0,0],61: [0,0],62: [0,0],63: [0,0],
                   64: [0,0],65: [0,0],66: [0,0],67: [0,0],68: [0,0],
                   'Am1':[0,0],'Am2':[0,0],'Am3':[0,0],'Am4':[0,0],'Am5':[0,0],
                   'Am6':[0,0],'Am7':[0,0],'Am8':[0,0,0,0],'Az1':[0,0],'Az2':[0,0],
                   'Az3':[0,0],'Az4':[0,0],'Az5':[0,0],'Az6':[0,0],'Az7':[0,0],
                   'Az8':[0,0,0,0],'R1':[0,0],'R2':[0,0],'R3':[0,0],'R4':[0,0],
                   'R5':[0,0],'R6':[0,0],'R7':[0,0],'R8':[0,0,0,0],'V1':[0,0],
                   'V2':[0,0],'V3':[0,0],'V4':[0,0],'V5':[0,0],'V6':[0,0],
                   'V7':[0,0],'V8':[0,0,0,0],'Am':2,'Az':2,'R':2,'V':2}

tablero_3 = {1: [0,0],2: [0,0],3: [0,0],4: [0,0],5: ['Am',0],6: [0,0],
                   7: [0,0],8: [0,0],9: [0,0],10: [0,0],11: [0,0],12: [0,0],
                   13: [0,0],14: [0,0],15: [0,0],16: [0,0],17: [0,0],18: [0,0],
                   19: [0,0],20: [0,0],21: [0,0],22: ['Az',0],23: [0,0],
                   24: [0,0],25: [0,0],26: [0,0],27: [0,0],28: [0,0],29: [0,0],
                   30: [0,0],31: [0,0],32: [0,0],33: [0,0],34: [0,0],35: [0,0],
                   36: [0,0],37: [0,0],38: [0,0],39: ['R',0],40: [0,0],
                   41: [0,0],42: [0,0],43: [0,0],44: [0,0],45: [0,0],46: [0,0],
                   47: [0,0],48: [0,0],49: [0,0],50: [0,0],51: [0,0],52: [0,0],
                   53: [0,0],54: [0,0],55: [0,0],56: ['V', 0],57: [0,0],
                   58: [0,0],59: [0,0],60: [0,0],61: [0,0],62: [0,0],63: [0,0],
                   64: [0,0],65: [0,0],66: [0,0],67: [0,0],68: [0,0],
                   'Am1':[0,0],'Am2':[0,0],'Am3':[0,0],'Am4':[0,0],'Am5':[0,0],
                   'Am6':[0,0],'Am7':[0,0],'Am8':[0,0,0,0],'Az1':[0,0],'Az2':[0,0],
                   'Az3':[0,0],'Az4':[0,0],'Az5':[0,0],'Az6':[0,0],'Az7':[0,0],
                   'Az8':[0,0,0,0],'R1':[0,0],'R2':[0,0],'R3':[0,0],'R4':[0,0],
                   'R5':[0,0],'R6':[0,0],'R7':[0,0],'R8':[0,0,0,0],'V1':[0,0],
                   'V2':[0,0],'V3':[0,0],'V4':[0,0],'V5':[0,0],'V6':[0,0],
                   'V7':[0,0],'V8':[0,0,0,0],'Am':3,'Az':3,'R':3,'V':3}

tablero_4 = {1: [0,0],2: [0,0],3: [0,0],4: [0,0],5: ['Am',0],6: [0,0],
                   7: [0,0],8: [0,0],9: [0,0],10: [0,0],11: [0,0],12: ['Am',0],
                   13: [0,0],14: [0,0],15: [0,0],16: [0,0],17: [0,0],18: [0,0],
                   19: [0,0],20: [0,0],21: [0,0],22: ['Az',0],23: [0,0],
                   24: [0,0],25: [0,0],26: [0,0],27: [0,0],28: [0,0],29: ['Az',0],
                   30: [0,0],31: [0,0],32: [0,0],33: [0,0],34: [0,0],35: [0,0],
                   36: [0,0],37: [0,0],38: [0,0],39: ['R',0],40: [0,0],
                   41: [0,0],42: [0,0],43: [0,0],44: [0,0],45: [0,0],46: ['R',0],
                   47: [0,0],48: [0,0],49: [0,0],50: [0,0],51: [0,0],52: [0,0],
                   53: [0,0],54: [0,0],55: [0,0],56: ['V', 0],57: [0,0],
                   58: [0,0],59: [0,0],60: [0,0],61: [0,0],62: [0,0],63: ['V',0],
                   64: [0,0],65: [0,0],66: [0,0],67: [0,0],68: [0,0],
                   'Am1':[0,0],'Am2':[0,0],'Am3':[0,0],'Am4':[0,0],'Am5':[0,0],
                   'Am6':[0,0],'Am7':[0,0],'Am8':[0,0,0,0],'Az1':[0,0],'Az2':[0,0],
                   'Az3':[0,0],'Az4':[0,0],'Az5':[0,0],'Az6':[0,0],'Az7':[0,0],
                   'Az8':[0,0,0,0],'R1':[0,0],'R2':[0,0],'R3':[0,0],'R4':[0,0],
                   'R5':[0,0],'R6':[0,0],'R7':[0,0],'R8':[0,0,0,0],'V1':[0,0],
                   'V2':[0,0],'V3':[0,0],'V4':[0,0],'V5':[0,0],'V6':[0,0],
                   'V7':[0,0],'V8':[0,0,0,0],'Am':2,'Az':2,'R':2,'V':2}

tablero_5 = {1: [0,0],2: [0,0],3: [0,0],4: [0,0],5: ['Am',0],6: [0,0],
                   7: [0,0],8: [0,0],9: [0,0],10: [0,0],11: [0,0],12: ['Az',0],
                   13: [0,0],14: [0,0],15: [0,0],16: [0,0],17: [0,0],18: [0,0],
                   19: [0,0],20: [0,0],21: [0,0],22: ['Az',0],23: [0,0],
                   24: [0,0],25: [0,0],26: [0,0],27: [0,0],28: [0,0],29: ['R',0],
                   30: [0,0],31: [0,0],32: [0,0],33: [0,0],34: [0,0],35: [0,0],
                   36: [0,0],37: [0,0],38: [0,0],39: ['R',0],40: [0,0],
                   41: [0,0],42: [0,0],43: [0,0],44: [0,0],45: [0,0],46: ['V',0],
                   47: [0,0],48: [0,0],49: [0,0],50: [0,0],51: [0,0],52: [0,0],
                   53: [0,0],54: [0,0],55: [0,0],56: ['V', 0],57: [0,0],
                   58: [0,0],59: [0,0],60: [0,0],61: [0,0],62: [0,0],63: ['Am',0],
                   64: [0,0],65: [0,0],66: [0,0],67: [0,0],68: [0,0],
                   'Am1':[0,0],'Am2':[0,0],'Am3':[0,0],'Am4':[0,0],'Am5':[0,0],
                   'Am6':[0,0],'Am7':[0,0],'Am8':[0,0,0,0],'Az1':[0,0],'Az2':[0,0],
                   'Az3':[0,0],'Az4':[0,0],'Az5':[0,0],'Az6':[0,0],'Az7':[0,0],
                   'Az8':[0,0,0,0],'R1':[0,0],'R2':[0,0],'R3':[0,0],'R4':[0,0],
                   'R5':[0,0],'R6':[0,0],'R7':[0,0],'R8':[0,0,0,0],'V1':[0,0],
                   'V2':[0,0],'V3':[0,0],'V4':[0,0],'V5':[0,0],'V6':[0,0],
                   'V7':[0,0],'V8':[0,0,0,0],'Am':2,'Az':2,'R':2,'V':2}

tablero_6 = {1: [0,0],2: [0,0],3: [0,0],4: [0,0],5: ['Am',0],6: [0,0],
                   7: [0,0],8: [0,0],9: [0,0],10: [0,0],11: [0,0],12: [0,0],
                   13: [0,0],14: [0,0],15: [0,0],16: [0,0],17: ['R',0],18: [0,0],
                   19: [0,0],20: [0,0],21: [0,0],22: ['Az',0],23: [0,0],
                   24: [0,0],25: ['Am',0],26: ['R',0],27: [0,0],28: [0,0],29: ['V','V'],
                   30: [0,0],31: [0,0],32: [0,0],33: [0,0],34: ['Az',0],35: [0,0],
                   36: [0,0],37: [0,0],38: [0,0],39: [0,0],40: [0,0],
                   41: [0,0],42: ['Az',0],43: ['V',0],44: [0,0],45: [0,0],46: ['Am','Am'],
                   47: [0,0],48: [0,0],49: [0,0],50: [0,0],51: ['R',0],52: [0,0],
                   53: [0,0],54: [0,0],55: [0,0],56: ['V', 0],57: [0,0],
                   58: [0,0],59: [0,0],60: [0,0],61: [0,0],62: [0,0],63: [0,0],
                   64: [0,0],65: [0,0],66: [0,0],67: [0,0],68: [0,0],
                   'Am1':[0,0],'Am2':[0,0],'Am3':[0,0],'Am4':[0,0],'Am5':[0,0],
                   'Am6':[0,0],'Am7':[0,0],'Am8':[0,0,0,0],'Az1':[0,0],'Az2':[0,0],
                   'Az3':[0,0],'Az4':[0,0],'Az5':[0,0],'Az6':[0,0],'Az7':[0,0],
                   'Az8':[0,0,0,0],'R1':[0,0],'R2':[0,0],'R3':[0,0],'R4':[0,0],
                   'R5':[0,0],'R6':[0,0],'R7':[0,0],'R8':[0,0,0,0],'V1':[0,0],
                   'V2':[0,0],'V3':[0,0],'V4':[0,0],'V5':[0,0],'V6':[0,0],
                   'V7':[0,0],'V8':[0,0,0,0],'Am':0,'Az':1,'R':1,'V':0}

tablero_7 = {1: [0,0],2: [0,0],3: ['Az',0],4: [0,0],5: ['Am',0],6: [0,0],
                   7: ['V',0],8: [0,0],9: [0,0],10: [0,0],11: [0,0],12: [0,0],
                   13: [0,0],14: [0,0],15: [0,0],16: [0,0],17: [0,0],18: [0,0],
                   19: [0,0],20: ['R',0],21: [0,0],22: ['Az',0],23: [0,0],
                   24: ['Am',0],25: [0,0],26: [0,0],27: [0,0],28: [0,0],29: [0,0],
                   30: [0,0],31: [0,0],32: [0,0],33: [0,0],34: ['V',0],35: [0,0],
                   36: [0,0],37: [0,0],38: [0,0],39: ['R',0],40: [0,0],
                   41: [0,0],42: [0,0],43: [0,0],44: [0,0],45: [0,0],46: [0,0],
                   47: [0,0],48: [0,0],49: [0,0],50: [0,0],51: ['Am',0],52: [0,0],
                   53: [0,0],54: [0,0],55: [0,0],56: ['V', 0],57: [0,0],
                   58: [0,0],59: [0,0],60: [0,0],61: [0,0],62: [0,0],63: [0,0],
                   64: [0,0],65: [0,0],66: [0,0],67: [0,0],68: [0,0],
                   'Am1':[0,0],'Am2':[0,0],'Am3':[0,0],'Am4':[0,0],'Am5':[0,0],
                   'Am6':[0,0],'Am7':[0,0],'Am8':[0,0,0,0],'Az1':[0,0],'Az2':[0,0],
                   'Az3':[0,0],'Az4':[0,0],'Az5':[0,0],'Az6':[0,0],'Az7':[0,0],
                   'Az8':[0,0,0,0],'R1':[0,0],'R2':[0,0],'R3':[0,0],'R4':[0,0],
                   'R5':[0,0],'R6':[0,0],'R7':[0,0],'R8':[0,0,0,0],'V1':[0,0],
                   'V2':[0,0],'V3':[0,0],'V4':[0,0],'V5':[0,0],'V6':[0,0],
                   'V7':[0,0],'V8':[0,0,0,0],'Am':1,'Az':2,'R':2,'V':1}

tablero_8 = {1: [0,0],2: [0,0],3: [0,0],4: [0,0],5: ['Am','Am'],6: [0,0],
                   7: [0,0],8: [0,0],9: [0,0],10: [0,0],11: [0,0],12: ['Am',0],
                   13: [0,0],14: [0,0],15: [0,0],16: [0,0],17: ['Am',0],18: [0,0],
                   19: [0,0],20: [0,0],21: [0,0],22: ['Az','Az'],23: [0,0],
                   24: [0,0],25: [0,0],26: [0,0],27: [0,0],28: [0,0],29: ['Az',0],
                   30: [0,0],31: [0,0],32: [0,0],33: [0,0],34: ['Az',0],35: [0,0],
                   36: [0,0],37: [0,0],38: [0,0],39: ['R','R'],40: [0,0],
                   41: [0,0],42: [0,0],43: [0,0],44: [0,0],45: [0,0],46: ['R',0],
                   47: [0,0],48: [0,0],49: [0,0],50: [0,0],51: ['R',0],52: [0,0],
                   53: [0,0],54: [0,0],55: [0,0],56: ['V', 'V'],57: [0,0],
                   58: [0,0],59: [0,0],60: [0,0],61: [0,0],62: [0,0],63: ['V',0],
                   64: [0,0],65: [0,0],66: [0,0],67: [0,0],68: ['V',0],
                   'Am1':[0,0],'Am2':[0,0],'Am3':[0,0],'Am4':[0,0],'Am5':[0,0],
                   'Am6':[0,0],'Am7':[0,0],'Am8':[0,0,0,0],'Az1':[0,0],'Az2':[0,0],
                   'Az3':[0,0],'Az4':[0,0],'Az5':[0,0],'Az6':[0,0],'Az7':[0,0],
                   'Az8':[0,0,0,0],'R1':[0,0],'R2':[0,0],'R3':[0,0],'R4':[0,0],
                   'R5':[0,0],'R6':[0,0],'R7':[0,0],'R8':[0,0,0,0],'V1':[0,0],
                   'V2':[0,0],'V3':[0,0],'V4':[0,0],'V5':[0,0],'V6':[0,0],
                   'V7':[0,0],'V8':[0,0,0,0],'Am':0,'Az':0,'R':0,'V':0}

tablero_9 = {1: [0,0],2: [0,0],3: [0,0],4: [0,0],5: ['Am',0],6: [0,0],
                   7: [0,0],8: [0,0],9: ['Am',0],10: [0,0],11: [0,0],12: ['V','V'],
                   13: [0,0],14: [0,0],15: [0,0],16: [0,0],17: [0,0],18: [0,0],
                   19: [0,0],20: [0,0],21: [0,0],22: ['Az',0],23: [0,0],
                   24: [0,0],25: [0,0],26: ['Az',0],27: [0,0],28: [0,0],29: ['Am','Am'],
                   30: [0,0],31: [0,0],32: [0,0],33: [0,0],34: [0,0],35: [0,0],
                   36: [0,0],37: [0,0],38: [0,0],39: ['R',0],40: [0,0],
                   41: [0,0],42: ['R',0],43: [0,0],44: [0,0],45: [0,0],46: ['Az','Az'],
                   47: [0,0],48: [0,0],49: [0,0],50: [0,0],51: [0,0],52: [0,0],
                   53: [0,0],54: [0,0],55: [0,0],56: ['V', 0],57: [0,0],
                   58: [0,0],59: ['V',0],60: [0,0],61: [0,0],62: [0,0],63: ['R','R'],
                   64: [0,0],65: [0,0],66: [0,0],67: [0,0],68: [0,0],
                   'Am1':[0,0],'Am2':[0,0],'Am3':[0,0],'Am4':[0,0],'Am5':[0,0],
                   'Am6':[0,0],'Am7':[0,0],'Am8':[0,0,0,0],'Az1':[0,0],'Az2':[0,0],
                   'Az3':[0,0],'Az4':[0,0],'Az5':[0,0],'Az6':[0,0],'Az7':[0,0],
                   'Az8':[0,0,0,0],'R1':[0,0],'R2':[0,0],'R3':[0,0],'R4':[0,0],
                   'R5':[0,0],'R6':[0,0],'R7':[0,0],'R8':[0,0,0,0],'V1':[0,0],
                   'V2':[0,0],'V3':[0,0],'V4':[0,0],'V5':[0,0],'V6':[0,0],
                   'V7':[0,0],'V8':[0,0,0,0],'Am':0,'Az':0,'R':0,'V':0}

tablero_10 = {1: [0,0],2: [0,0],3: [0,0],4: [0,0],5: ['Am',0],6: [0,0],
                   7: [0,0],8: [0,0],9: [0,0],10: [0,0],11: [0,0],12: ['Am',0],
                   13: [0,0],14: [0,0],15: [0,0],16: [0,0],17: ['Am','V'],18: [0,0],
                   19: [0,0],20: [0,0],21: [0,0],22: ['Az',0],23: [0,0],
                   24: [0,0],25: [0,0],26: [0,0],27: [0,0],28: [0,0],29: ['Az',0],
                   30: [0,0],31: [0,0],32: [0,0],33: [0,0],34: ['Az','Am'],35: [0,0],
                   36: [0,0],37: [0,0],38: [0,0],39: ['R',0],40: [0,0],
                   41: [0,0],42: [0,0],43: [0,0],44: [0,0],45: [0,0],46: ['R',0],
                   47: [0,0],48: [0,0],49: [0,0],50: [0,0],51: ['R','Az'],52: [0,0],
                   53: [0,0],54: [0,0],55: [0,0],56: ['V', 0],57: [0,0],
                   58: [0,0],59: [0,0],60: [0,0],61: [0,0],62: [0,0],63: ['V',0],
                   64: [0,0],65: [0,0],66: [0,0],67: [0,0],68: ['R','V'],
                   'Am1':[0,0],'Am2':[0,0],'Am3':[0,0],'Am4':[0,0],'Am5':[0,0],
                   'Am6':[0,0],'Am7':[0,0],'Am8':[0,0,0,0],'Az1':[0,0],'Az2':[0,0],
                   'Az3':[0,0],'Az4':[0,0],'Az5':[0,0],'Az6':[0,0],'Az7':[0,0],
                   'Az8':[0,0,0,0],'R1':[0,0],'R2':[0,0],'R3':[0,0],'R4':[0,0],
                   'R5':[0,0],'R6':[0,0],'R7':[0,0],'R8':[0,0,0,0],'V1':[0,0],
                   'V2':[0,0],'V3':[0,0],'V4':[0,0],'V5':[0,0],'V6':[0,0],
                   'V7':[0,0],'V8':[0,0,0,0],'Am':0,'Az':0,'R':0,'V':0}

tablero_aleatorio1 = {1: [0, 0], 2: [0, 0], 3: [0, 0], 4: [0, 0], 5: [0, 0], 6: [0, 0], 7: [0, 0], 8: [0, 0], 9: [0, 0], 10: [0, 0], 11: [0, 0], 12: ['V', 0], 13: [0, 0], 14: [0, 0], 15: [0, 0], 16: ['V', 0], 17: [0, 0], 18: ['R', 0], 19: [0, 0], 20: [0, 0], 21: [0, 0], 22: [0, 0], 23: [0, 0], 24: [0, 0], 25: [0, 0], 26: [0, 0], 27: [0, 0], 28: ['Az', 0], 29: [0, 0], 30: [0, 0], 31: [0, 0], 32: [0, 0], 33: ['Az', 0], 34: [0, 0], 35: [0, 0], 36: [0, 0], 37: ['Az', 0], 38: [0, 0], 39: [0, 0], 40: ['Am', 0], 41: [0, 0], 42: [0, 0], 43: [0, 0], 44: [0, 0], 45: [0, 0], 46: [0, 0], 47: [0, 0], 48: [0, 0], 49: [0, 0], 50: [0, 0], 51: [0, 0], 52: [0, 0], 53: [0, 0], 54: [0, 0], 55: [0, 0], 56: [0, 0], 57: [0, 0], 58: [0, 0], 59: [0, 0], 60: [0, 0], 61: [0, 0], 62: [0, 0], 63: [0, 0], 64: [0, 0], 65: [0, 0], 66: [0, 0], 67: [0, 0], 68: [0, 0], 'Am1': [0, 0], 'Am2': ['Am', 0], 'Am3': [0, 0], 'Am4': [0, 0], 'Am5': [0, 0], 'Am6': [0, 0], 'Am7': [0, 0], 'Am8': ['Am', 0, 0, 0], 'Az1': [0, 0], 'Az2': [0, 0], 'Az3': [0, 0], 'Az4': [0, 0], 'Az5': [0, 0], 'Az6': [0, 0], 'Az7': [0, 0], 'Az8': ['Az', 0, 0, 0], 'R1': [0, 0], 'R2': [0, 0], 'R3': [0, 0], 'R4': [0, 0], 'R5': [0, 0], 'R6': [0, 0], 'R7': [0, 0], 'R8': [0, 0, 0, 0], 'V1': [0, 0], 'V2': [0, 0], 'V3': [0, 0], 'V4': [0, 0], 'V5': [0, 0], 'V6': [0, 0], 'V7': [0, 0], 'V8': ['V', 0, 0, 0], 'Am': 1, 'Az': 0, 'R': 3, 'V': 1}


tablero_aleatorio2 = {1: [0, 0], 2: [0, 0], 3: [0, 0], 4: [0, 0], 5: [0, 0], 6: [0, 0], 7: [0, 0], 8: [0, 0], 9: ['Am', 0], 10: [0, 0], 11: [0, 0], 12: [0, 0], 13: [0, 0], 14: [0, 0], 15: [0, 0], 16: [0, 0], 17: [0, 0], 18: [0, 0], 19: [0, 0], 20: [0, 0], 21: [0, 0], 22: [0, 0], 23: [0, 0], 24: [0, 0], 25: [0, 0], 26: ['Az', 0], 27: [0, 0], 28: [0, 0], 29: [0, 0], 30: [0, 0], 31: [0, 0], 32: ['V', 0], 33: [0, 0], 34: [0, 0], 35: [0, 0], 36: [0, 0], 37: [0, 0], 38: [0, 0], 39: [0, 0], 40: [0, 0], 41: [0, 0], 42: [0, 0], 43: ['Am', 0], 44: [0, 0], 45: [0, 0], 46: [0, 0], 47: ['R', 0], 48: [0, 0], 49: [0, 0], 50: [0, 0], 51: [0, 0], 52: ['Az', 0], 53: [0, 0], 54: [0, 0], 55: [0, 0], 56: [0, 0], 57: [0, 0], 58: [0, 0], 59: [0, 0], 60: ['R', 0], 61: [0, 0], 62: [0, 0], 63: [0, 0], 64: [0, 0], 65: [0, 0], 66: [0, 0], 67: [0, 0], 68: ['V', 0], 'Am1': [0, 0], 'Am2': [0, 0], 'Am3': [0, 0], 'Am4': [0, 0], 'Am5': [0, 0], 'Am6': [0, 0], 'Am7': [0, 0], 'Am8': [0, 0, 0, 0], 'Az1': [0, 0], 'Az2': [0, 0], 'Az3': [0, 0], 'Az4': [0, 0], 'Az5': [0, 0], 'Az6': [0, 0], 'Az7': [0, 0], 'Az8': [0, 0, 0, 0], 'R1': [0, 0], 'R2': [0, 0], 'R3': [0, 0], 'R4': [0, 0], 'R5': [0, 0], 'R6': [0, 0], 'R7': [0, 0], 'R8': [0, 0, 0, 0], 'V1': [0, 0], 'V2': [0, 0], 'V3': [0, 0], 'V4': [0, 0], 'V5': [0, 0], 'V6': [0, 0], 'V7': [0, 0], 'V8': [0, 0, 0, 0], 'Am': 2, 'Az': 2, 'R': 2, 'V': 2}

tablero_aleatorio3 = {1: [0, 0], 2: [0, 0], 3: [0, 0], 4: [0, 0], 5: [0, 0], 6: [0, 0], 7: [0, 0], 8: [0, 0], 9: [0, 0], 10: [0, 0], 11: ['V', 0], 12: [0, 0], 13: [0, 0], 14: [0, 0], 15: [0, 0], 16: [0, 0], 17: [0, 0], 18: [0, 0], 19: [0, 0], 20: [0, 0], 21: ['V', 0], 22: [0, 0], 23: [0, 0], 24: [0, 0], 25: [0, 0], 26: [0, 0], 27: [0, 0], 28: [0, 0], 29: [0, 0], 30: [0, 0], 31: [0, 0], 32: [0, 0], 33: [0, 0], 34: [0, 0], 35: [0, 0], 36: [0, 0], 37: [0, 0], 38: [0, 0], 39: [0, 0], 40: [0, 0], 41: [0, 0], 42: [0, 0], 43: [0, 0], 44: [0, 0], 45: ['R', 0], 46: [0, 0], 47: [0, 0], 48: [0, 0], 49: [0, 0], 50: [0, 0], 51: [0, 0], 52: [0, 0], 53: [0, 0], 54: [0, 0], 55: [0, 0], 56: [0, 0], 57: [0, 0], 58: [0, 0], 59: [0, 0], 60: [0, 0], 61: [0, 0], 62: [0, 0], 63: [0, 0], 64: [0, 0], 65: [0, 0], 66: [0, 0], 67: [0, 0], 68: [0, 0], 'Am1': [0, 0], 'Am2': [0, 0], 'Am3': [0, 0], 'Am4': [0, 0], 'Am5': [0, 0], 'Am6': [0, 0], 'Am7': ['Am', 0], 'Am8': ['Am', 0, 0, 0], 'Az1': [0, 0], 'Az2': [0, 0], 'Az3': [0, 0], 'Az4': [0, 0], 'Az5': ['Az', 0], 'Az6': ['Az', 0], 'Az7': [0, 0], 'Az8': [0, 0, 0, 0], 'R1': [0, 0], 'R2': [0, 0], 'R3': [0, 0], 'R4': [0, 0], 'R5': [0, 0], 'R6': [0, 0], 'R7': [0, 0], 'R8': [0, 0, 0, 0], 'V1': [0, 0], 'V2': [0, 0], 'V3': [0, 0], 'V4': [0, 0], 'V5': [0, 0], 'V6': [0, 0], 'V7': [0, 0], 'V8': ['V', 0, 0, 0], 'Am': 2, 'Az': 2, 'R': 3, 'V': 1}


tablero_aleatorio4 = {1: [0, 0], 2: [0, 0], 3: [0, 0], 4: [0, 0], 5: [0, 0], 6: [0, 0], 7: [0, 0], 8: [0, 0], 9: [0, 0], 10: [0, 0], 11: [0, 0], 12: [0, 0], 13: [0, 0], 14: [0, 0], 15: [0, 0], 16: [0, 0], 17: [0, 0], 18: [0, 0], 19: [0, 0], 20: [0, 0], 21: [0, 0], 22: ['Az', 0], 23: [0, 0], 24: [0, 0], 25: [0, 0], 26: [0, 0], 27: ['V', 0], 28: [0, 0], 29: [0, 0], 30: [0, 0], 31: [0, 0], 32: [0, 0], 33: [0, 0], 34: [0, 0], 35: [0, 0], 36: [0, 0], 37: ['Az', 0], 38: [0, 0], 39: [0, 0], 40: ['R', 0], 41: [0, 0], 42: ['Am', 0], 43: ['R', 0], 44: [0, 0], 45: [0, 0], 46: [0, 0], 47: [0, 0], 48: [0, 0], 49: [0, 0], 50: [0, 0], 51: [0, 0], 52: [0, 0], 53: [0, 0], 54: [0, 0], 55: [0, 0], 56: ['Az', 0], 57: [0, 0], 58: [0, 0], 59: [0, 0], 60: [0, 0], 61: [0, 0], 62: [0, 0], 63: ['R', 0], 64: [0, 0], 65: [0, 0], 66: [0, 0], 67: [0, 0], 68: [0, 0], 'Am1': [0, 0], 'Am2': [0, 0], 'Am3': [0, 0], 'Am4': [0, 0], 'Am5': [0, 0], 'Am6': [0, 0], 'Am7': [0, 0], 'Am8': [0, 0, 0, 0], 'Az1': [0, 0], 'Az2': [0, 0], 'Az3': [0, 0], 'Az4': [0, 0], 'Az5': [0, 0], 'Az6': [0, 0], 'Az7': [0, 0], 'Az8': [0, 0, 0, 0], 'R1': [0, 0], 'R2': [0, 0], 'R3': [0, 0], 'R4': [0, 0], 'R5': [0, 0], 'R6': [0, 0], 'R7': [0, 0], 'R8': [0, 0, 0, 0], 'V1': [0, 0], 'V2': [0, 0], 'V3': [0, 0], 'V4': [0, 0], 'V5': [0, 0], 'V6': [0, 0], 'V7': [0, 0], 'V8': [0, 0, 0, 0], 'Am': 3, 'Az': 1, 'R': 1, 'V': 3}

tablero_aleatorio5 = {1: [0, 0], 2: [0, 0], 3: [0, 0], 4: [0, 0], 5: [0, 0], 6: [0, 0], 7: [0, 0], 8: [0, 0], 9: [0, 0], 10: [0, 0], 11: [0, 0], 12: [0, 0], 13: [0, 0], 14: [0, 0], 15: [0, 0], 16: [0, 0], 17: [0, 0], 18: [0, 0], 19: [0, 0], 20: [0, 0], 21: [0, 0], 22: [0, 0], 23: [0, 0], 24: [0, 0], 25: [0, 0], 26: [0, 0], 27: ['V', 0], 28: [0, 0], 29: [0, 0], 30: [0, 0], 31: [0, 0], 32: [0, 0], 33: [0, 0], 34: [0, 0], 35: [0, 0], 36: [0, 0], 37: [0, 0], 38: [0, 0], 39: [0, 0], 40: [0, 0], 41: [0, 0], 42: [0, 0], 43: [0, 0], 44: [0, 0], 45: [0, 0], 46: [0, 0], 47: [0, 0], 48: [0, 0], 49: [0, 0], 50: [0, 0], 51: [0, 0], 52: [0, 0], 53: [0, 0], 54: [0, 0], 55: [0, 0], 56: [0, 0], 57: ['Az', 0], 58: [0, 0], 59: [0, 0], 60: [0, 0], 61: ['Am', 0], 62: [0, 0], 63: [0, 0], 64: [0, 0], 65: [0, 0], 66: [0, 0], 67: [0, 0], 68: [0, 0], 'Am1': [0, 0], 'Am2': [0, 0], 'Am3': [0, 0], 'Am4': [0, 0], 'Am5': [0, 0], 'Am6': [0, 0], 'Am7': [0, 0], 'Am8': [0, 0, 0, 0], 'Az1': [0, 0], 'Az2': [0, 0], 'Az3': [0, 0], 'Az4': [0, 0], 'Az5': [0, 0], 'Az6': [0, 0], 'Az7': [0, 0], 'Az8': [0, 0, 0, 0], 'R1': [0, 0], 'R2': [0, 0], 'R3': [0, 0], 'R4': [0, 0], 'R5': [0, 0], 'R6': [0, 0], 'R7': [0, 0], 'R8': [0, 0, 0, 0], 'V1': [0, 0], 'V2': [0, 0], 'V3': [0, 0], 'V4': [0, 0], 'V5': [0, 0], 'V6': [0, 0], 'V7': [0, 0], 'V8': [0, 0, 0, 0], 'Am': 3, 'Az': 3, 'R': 4, 'V': 3}

tablero_aleatorio6 = {1: [0, 0], 2: [0, 0], 3: [0, 0], 4: ['R', 0], 5: [0, 0], 6: [0, 0], 7: [0, 0], 8: [0, 0], 9: [0, 0], 10: [0, 0], 11: ['Am', 0], 12: [0, 0], 13: [0, 0], 14: [0, 0], 15: [0, 0], 16: [0, 0], 17: [0, 0], 18: [0, 0], 19: [0, 0], 20: [0, 0], 21: [0, 0], 22: [0, 0], 23: [0, 0], 24: [0, 0], 25: [0, 0], 26: [0, 0], 27: [0, 0], 28: [0, 0], 29: ['Az', 0], 30: [0, 0], 31: ['V', 0], 32: [0, 0], 33: [0, 0], 34: [0, 0], 35: [0, 0], 36: [0, 0], 37: ['Am', 0], 38: [0, 0], 39: [0, 0], 40: [0, 0], 41: [0, 0], 42: [0, 0], 43: [0, 0], 44: ['Az', 0], 45: [0, 0], 46: [0, 0], 47: [0, 0], 48: [0, 0], 49: [0, 0], 50: [0, 0], 51: [0, 0], 52: ['R', 0], 53: [0, 0], 54: [0, 0], 55: [0, 0], 56: [0, 0], 57: [0, 0], 58: [0, 0], 59: [0, 0], 60: [0, 0], 61: [0, 0], 62: [0, 0], 63: [0, 0], 64: [0, 0], 65: [0, 0], 66: [0, 0], 67: [0, 0], 68: [0, 0], 'Am1': [0, 0], 'Am2': [0, 0], 'Am3': [0, 0], 'Am4': [0, 0], 'Am5': [0, 0], 'Am6': [0, 0], 'Am7': [0, 0], 'Am8': [0, 0, 0, 0], 'Az1': [0, 0], 'Az2': [0, 0], 'Az3': [0, 0], 'Az4': [0, 0], 'Az5': [0, 0], 'Az6': [0, 0], 'Az7': [0, 0], 'Az8': [0, 0, 0, 0], 'R1': [0, 0], 'R2': [0, 0], 'R3': [0, 0], 'R4': [0, 0], 'R5': [0, 0], 'R6': [0, 0], 'R7': [0, 0], 'R8': [0, 0, 0, 0], 'V1': [0, 0], 'V2': ['V', 0], 'V3': [0, 0], 'V4': [0, 0], 'V5': [0, 0], 'V6': [0, 0], 'V7': [0, 0], 'V8': [0, 0, 0, 0], 'Am': 2, 'Az': 2, 'R': 2, 'V': 2}

tablero_aleatorio7 = {1: [0, 0], 2: [0, 0], 3: [0, 0], 4: [0, 0], 5: [0, 0], 6: [0, 0], 7: [0, 0], 8: [0, 0], 9: [0, 0], 10: [0, 0], 11: [0, 0], 12: [0, 0], 13: [0, 0], 14: [0, 0], 15: [0, 0], 16: [0, 0], 17: [0, 0], 18: [0, 0], 19: [0, 0], 20: [0, 0], 21: ['V', 0], 22: [0, 0], 23: [0, 0], 24: [0, 0], 25: [0, 0], 26: [0, 0], 27: ['Az', 0], 28: [0, 0], 29: [0, 0], 30: [0, 0], 31: [0, 0], 32: [0, 0], 33: [0, 0], 34: [0, 0], 35: [0, 0], 36: [0, 0], 37: [0, 0], 38: [0, 0], 39: [0, 0], 40: ['Az', 0], 41: [0, 0], 42: [0, 0], 43: ['Am', 0], 44: [0, 0], 45: ['Am', 0], 46: [0, 0], 47: [0, 0], 48: [0, 0], 49: ['R', 0], 50: [0, 0], 51: [0, 0], 52: [0, 0], 53: [0, 0], 54: [0, 0], 55: [0, 0], 56: [0, 0], 57: [0, 0], 58: [0, 0], 59: [0, 0], 60: [0, 0], 61: [0, 0], 62: [0, 0], 63: [0, 0], 64: [0, 0], 65: [0, 0], 66: [0, 0], 67: [0, 0], 68: ['V', 0], 'Am1': [0, 0], 'Am2': [0, 0], 'Am3': [0, 0], 'Am4': [0, 0], 'Am5': [0, 0], 'Am6': [0, 0], 'Am7': [0, 0], 'Am8': [0, 0, 0, 0], 'Az1': [0, 0], 'Az2': [0, 0], 'Az3': [0, 0], 'Az4': [0, 0], 'Az5': [0, 0], 'Az6': [0, 0], 'Az7': [0, 0], 'Az8': [0, 0, 0, 0], 'R1': [0, 0], 'R2': [0, 0], 'R3': [0, 0], 'R4': [0, 0], 'R5': [0, 0], 'R6': [0, 0], 'R7': [0, 0], 'R8': [0, 0, 0, 0], 'V1': [0, 0], 'V2': [0, 0], 'V3': [0, 0], 'V4': [0, 0], 'V5': [0, 0], 'V6': [0, 0], 'V7': [0, 0], 'V8': [0, 0, 0, 0], 'Am': 2, 'Az': 2, 'R': 3, 'V': 2}

tablero_aleatorio8 = {1: [0, 0], 2: [0, 0], 3: [0, 0], 4: [0, 0], 5: [0, 0], 6: [0, 0], 7: [0, 0], 8: [0, 0], 9: [0, 0], 10: [0, 0], 11: [0, 0], 12: [0, 0], 13: [0, 0], 14: [0, 0], 15: [0, 0], 16: [0, 0], 17: [0, 0], 18: [0, 0], 19: [0, 0], 20: [0, 0], 21: [0, 0], 22: [0, 0], 23: [0, 0], 24: [0, 0], 25: [0, 0], 26: ['Am', 0], 27: [0, 0], 28: [0, 0], 29: [0, 0], 30: ['V', 0], 31: [0, 0], 32: [0, 0], 33: [0, 0], 34: [0, 0], 35: [0, 0], 36: [0, 0], 37: [0, 0], 38: [0, 0], 39: ['R', 0], 40: [0, 0], 41: [0, 0], 42: [0, 0], 43: [0, 0], 44: [0, 0], 45: [0, 0], 46: [0, 0], 47: [0, 0], 48: [0, 0], 49: [0, 0], 50: [0, 0], 51: [0, 0], 52: ['Az', 0], 53: [0, 0], 54: [0, 0], 55: [0, 0], 56: [0, 0], 57: [0, 0], 58: [0, 0], 59: [0, 0], 60: [0, 0], 61: [0, 0], 62: [0, 0], 63: ['V', 0], 64: ['R', 0], 65: [0, 0], 66: [0, 0], 67: [0, 0], 68: [0, 0], 'Am1': [0, 0], 'Am2': [0, 0], 'Am3': [0, 0], 'Am4': [0, 0], 'Am5': [0, 0], 'Am6': [0, 0], 'Am7': [0, 0], 'Am8': [0, 0, 0, 0], 'Az1': [0, 0], 'Az2': [0, 0], 'Az3': [0, 0], 'Az4': [0, 0], 'Az5': [0, 0], 'Az6': [0, 0], 'Az7': [0, 0], 'Az8': [0, 0, 0, 0], 'R1': [0, 0], 'R2': [0, 0], 'R3': [0, 0], 'R4': [0, 0], 'R5': [0, 0], 'R6': [0, 0], 'R7': [0, 0], 'R8': [0, 0, 0, 0], 'V1': [0, 0], 'V2': [0, 0], 'V3': [0, 0], 'V4': [0, 0], 'V5': [0, 0], 'V6': [0, 0], 'V7': [0, 0], 'V8': [0, 0, 0, 0], 'Am': 3, 'Az': 3, 'R': 2, 'V': 2}

tablero_aleatorio9 = {1: [0, 0], 2: [0, 0], 3: [0, 0], 4: [0, 0], 5: [0, 0], 6: [0, 0], 7: [0, 0], 8: [0, 0], 9: [0, 0], 10: [0, 0], 11: [0, 0], 12: [0, 0], 13: [0, 0], 14: [0, 0], 15: [0, 0], 16: ['Az', 0], 17: ['Am', 0], 18: [0, 0], 19: [0, 0], 20: [0, 0], 21: [0, 0], 22: [0, 0], 23: [0, 0], 24: [0, 0], 25: [0, 0], 26: [0, 0], 27: [0, 0], 28: [0, 0], 29: [0, 0], 30: [0, 0], 31: [0, 0], 32: [0, 0], 33: [0, 0], 34: [0, 0], 35: [0, 0], 36: [0, 0], 37: [0, 0], 38: [0, 0], 39: [0, 0], 40: [0, 0], 41: ['Am', 0], 42: [0, 0], 43: [0, 0], 44: [0, 0], 45: [0, 0], 46: ['Az', 0], 47: [0, 0], 48: [0, 0], 49: [0, 0], 50: [0, 0], 51: [0, 0], 52: [0, 0], 53: [0, 0], 54: [0, 0], 55: [0, 0], 56: ['V', 0], 57: [0, 0], 58: [0, 0], 59: [0, 0], 60: [0, 0], 61: [0, 0], 62: [0, 0], 63: [0, 0], 64: [0, 0], 65: [0, 0], 66: [0, 0], 67: [0, 0], 68: [0, 0], 'Am1': [0, 0], 'Am2': [0, 0], 'Am3': [0, 0], 'Am4': [0, 0], 'Am5': [0, 0], 'Am6': [0, 0], 'Am7': [0, 0], 'Am8': [0, 0, 0, 0], 'Az1': [0, 0], 'Az2': [0, 0], 'Az3': [0, 0], 'Az4': [0, 0], 'Az5': [0, 0], 'Az6': [0, 0], 'Az7': [0, 0], 'Az8': [0, 0, 0, 0], 'R1': [0, 0], 'R2': [0, 0], 'R3': [0, 0], 'R4': [0, 0], 'R5': [0, 0], 'R6': [0, 0], 'R7': [0, 0], 'R8': ['R', 0, 0, 0], 'V1': [0, 0], 'V2': [0, 0], 'V3': [0, 0], 'V4': [0, 0], 'V5': [0, 0], 'V6': [0, 0], 'V7': [0, 0], 'V8': [0, 0, 0, 0], 'Am': 2, 'Az': 2, 'R': 3, 'V': 3}

tablero_aleatorio10 = {1: [0, 0], 2: [0, 0], 3: [0, 0], 4: [0, 0], 5: [0, 0], 6: [0, 0], 7: [0, 0], 8: [0, 0], 9: ['Az', 0], 10: [0, 0], 11: [0, 0], 12: [0, 0], 13: [0, 0], 14: [0, 0], 15: [0, 0], 16: [0, 0], 17: [0, 0], 18: [0, 0], 19: [0, 0], 20: [0, 0], 21: [0, 0], 22: [0, 0], 23: [0, 0], 24: [0, 0], 25: [0, 0], 26: [0, 0], 27: [0, 0], 28: [0, 0], 29: [0, 0], 30: [0, 0], 31: [0, 0], 32: [0, 0], 33: [0, 0], 34: [0, 0], 35: [0, 0], 36: [0, 0], 37: [0, 0], 38: [0, 0], 39: [0, 0], 40: [0, 0], 41: [0, 0], 42: [0, 0], 43: [0, 0], 44: [0, 0], 45: [0, 0], 46: [0, 0], 47: [0, 0], 48: [0, 0], 49: [0, 0], 50: [0, 0], 51: ['Am', 0], 52: [0, 0], 53: [0, 0], 54: [0, 0], 55: [0, 0], 56: [0, 0], 57: [0, 0], 58: [0, 0], 59: [0, 0], 60: [0, 0], 61: [0, 0], 62: [0, 0], 63: [0, 0], 64: ['Az', 0], 65: [0, 0], 66: [0, 0], 67: [0, 0], 68: ['Am', 0], 'Am1': [0, 0], 'Am2': [0, 0], 'Am3': [0, 0], 'Am4': [0, 0], 'Am5': [0, 0], 'Am6': [0, 0], 'Am7': [0, 0], 'Am8': [0, 0, 0, 0], 'Az1': [0, 0], 'Az2': [0, 0], 'Az3': [0, 0], 'Az4': [0, 0], 'Az5': [0, 0], 'Az6': [0, 0], 'Az7': [0, 0], 'Az8': [0, 0, 0, 0], 'R1': [0, 0], 'R2': [0, 0], 'R3': [0, 0], 'R4': [0, 0], 'R5': [0, 0], 'R6': [0, 0], 'R7': [0, 0], 'R8': [0, 0, 0, 0], 'V1': [0, 0], 'V2': [0, 0], 'V3': [0, 0], 'V4': [0, 0], 'V5': [0, 0], 'V6': [0, 0], 'V7': [0, 0], 'V8': [0, 0, 0, 0], 'Am': 2, 'Az': 2, 'R': 4, 'V': 4}

tablero_aleatorio11 = {1: [0, 0], 2: [0, 0], 3: [0, 0], 4: ['R', 0], 5: [0, 0], 6: [0, 0], 7: [0, 0], 8: [0, 0], 9: [0, 0], 10: [0, 0], 11: [0, 0], 12: [0, 0], 13: [0, 0], 14: [0, 0], 15: ['Az', 0], 16: [0, 0], 17: [0, 0], 18: [0, 0], 19: [0, 0], 20: [0, 0], 21: [0, 0], 22: [0, 0], 23: [0, 0], 24: [0, 0], 25: [0, 0], 26: [0, 0], 27: [0, 0], 28: [0, 0], 29: [0, 0], 30: [0, 0], 31: [0, 0], 32: [0, 0], 33: [0, 0], 34: [0, 0], 35: [0, 0], 36: [0, 0], 37: [0, 0], 38: [0, 0], 39: [0, 0], 40: [0, 0], 41: [0, 0], 42: [0, 0], 43: [0, 0], 44: [0, 0], 45: ['R', 0], 46: [0, 0], 47: [0, 0], 48: [0, 0], 49: [0, 0], 50: [0, 0], 51: [0, 0], 52: [0, 0], 53: ['Am', 0], 54: [0, 0], 55: [0, 0], 56: ['V', 0], 57: [0, 0], 58: [0, 0], 59: [0, 0], 60: [0, 0], 61: [0, 0], 62: [0, 0], 63: [0, 0], 64: [0, 0], 65: [0, 0], 66: ['V', 0], 67: [0, 0], 68: [0, 0], 'Am1': [0, 0], 'Am2': [0, 0], 'Am3': [0, 0], 'Am4': [0, 0], 'Am5': [0, 0], 'Am6': [0, 0], 'Am7': [0, 0], 'Am8': [0, 0, 0, 0], 'Az1': [0, 0], 'Az2': [0, 0], 'Az3': [0, 0], 'Az4': [0, 0], 'Az5': [0, 0], 'Az6': [0, 0], 'Az7': [0, 0], 'Az8': [0, 0, 0, 0], 'R1': [0, 0], 'R2': [0, 0], 'R3': [0, 0], 'R4': [0, 0], 'R5': [0, 0], 'R6': [0, 0], 'R7': [0, 0], 'R8': [0, 0, 0, 0], 'V1': [0, 0], 'V2': [0, 0], 'V3': [0, 0], 'V4': [0, 0], 'V5': [0, 0], 'V6': [0, 0], 'V7': [0, 0], 'V8': [0, 0, 0, 0], 'Am': 3, 'Az': 3, 'R': 2, 'V': 2}

tablero_aleatorio12 = {1: ['R', 0], 2: [0, 0], 3: [0, 0], 4: [0, 0], 5: [0, 0], 6: [0, 0], 7: [0, 0], 8: [0, 0], 9: [0, 0], 10: [0, 0], 11: ['R', 0], 12: [0, 0], 13: [0, 0], 14: [0, 0], 15: [0, 0], 16: [0, 0], 17: [0, 0], 18: [0, 0], 19: [0, 0], 20: [0, 0], 21: [0, 0], 22: [0, 0], 23: [0, 0], 24: [0, 0], 25: [0, 0], 26: [0, 0], 27: [0, 0], 28: ['Am', 0], 29: [0, 0], 30: [0, 0], 31: [0, 0], 32: [0, 0], 33: [0, 0], 34: [0, 0], 35: [0, 0], 36: [0, 0], 37: [0, 0], 38: [0, 0], 39: [0, 0], 40: [0, 0], 41: [0, 0], 42: [0, 0], 43: [0, 0], 44: ['V', 0], 45: [0, 0], 46: ['Az', 0], 47: [0, 0], 48: [0, 0], 49: [0, 0], 50: [0, 0], 51: [0, 0], 52: [0, 0], 53: [0, 0], 54: [0, 0], 55: [0, 0], 56: [0, 0], 57: [0, 0], 58: [0, 0], 59: [0, 0], 60: [0, 0], 61: [0, 0], 62: ['Az', 0], 63: [0, 0], 64: [0, 0], 65: [0, 0], 66: [0, 0], 67: [0, 0], 68: [0, 0], 'Am1': [0, 0], 'Am2': [0, 0], 'Am3': [0, 0], 'Am4': [0, 0], 'Am5': [0, 0], 'Am6': [0, 0], 'Am7': [0, 0], 'Am8': [0, 0, 0, 0], 'Az1': [0, 0], 'Az2': [0, 0], 'Az3': [0, 0], 'Az4': [0, 0], 'Az5': [0, 0], 'Az6': [0, 0], 'Az7': [0, 0], 'Az8': [0, 0, 0, 0], 'R1': [0, 0], 'R2': [0, 0], 'R3': [0, 0], 'R4': [0, 0], 'R5': [0, 0], 'R6': [0, 0], 'R7': [0, 0], 'R8': [0, 0, 0, 0], 'V1': [0, 0], 'V2': [0, 0], 'V3': [0, 0], 'V4': [0, 0], 'V5': [0, 0], 'V6': [0, 0], 'V7': [0, 0], 'V8': [0, 0, 0, 0], 'Am': 3, 'Az': 2, 'R': 2, 'V': 3}

tablero_aleatorio13 = {1: [0, 0], 2: [0, 0], 3: [0, 0], 4: [0, 0], 5: [0, 0], 6: [0, 0], 7: [0, 0], 8: [0, 0], 9: [0, 0], 10: [0, 0], 11: [0, 0], 12: [0, 0], 13: [0, 0], 14: [0, 0], 15: [0, 0], 16: [0, 0], 17: [0, 0], 18: ['R', 0], 19: [0, 0], 20: [0, 0], 21: ['Am', 0], 22: [0, 0], 23: [0, 0], 24: [0, 0], 25: [0, 0], 26: [0, 0], 27: [0, 0], 28: ['R', 0], 29: [0, 0], 30: [0, 0], 31: [0, 0], 32: [0, 0], 33: [0, 0], 34: ['Az', 0], 35: [0, 0], 36: [0, 0], 37: [0, 0], 38: [0, 0], 39: [0, 0], 40: [0, 0], 41: [0, 0], 42: [0, 0], 43: [0, 0], 44: [0, 0], 45: [0, 0], 46: [0, 0], 47: [0, 0], 48: [0, 0], 49: [0, 0], 50: [0, 0], 51: [0, 0], 52: [0, 0], 53: [0, 0], 54: [0, 0], 55: [0, 0], 56: [0, 0], 57: [0, 0], 58: [0, 0], 59: [0, 0], 60: [0, 0], 61: [0, 0], 62: [0, 0], 63: [0, 0], 64: ['Az', 0], 65: ['Az', 0], 66: [0, 0], 67: [0, 0], 68: ['V', 0], 'Am1': [0, 0], 'Am2': [0, 0], 'Am3': [0, 0], 'Am4': [0, 0], 'Am5': [0, 0], 'Am6': [0, 0], 'Am7': [0, 0], 'Am8': [0, 0, 0, 0], 'Az1': [0, 0], 'Az2': [0, 0], 'Az3': [0, 0], 'Az4': [0, 0], 'Az5': [0, 0], 'Az6': [0, 0], 'Az7': [0, 0], 'Az8': [0, 0, 0, 0], 'R1': [0, 0], 'R2': [0, 0], 'R3': [0, 0], 'R4': [0, 0], 'R5': [0, 0], 'R6': [0, 0], 'R7': [0, 0], 'R8': [0, 0, 0, 0], 'V1': [0, 0], 'V2': [0, 0], 'V3': [0, 0], 'V4': [0, 0], 'V5': [0, 0], 'V6': [0, 0], 'V7': [0, 0], 'V8': [0, 0, 0, 0], 'Am': 3, 'Az': 1, 'R': 2, 'V': 3}

tablero_aleatorio14 = {1: [0, 0], 2: [0, 0], 3: [0, 0], 4: [0, 0], 5: [0, 0], 6: [0, 0], 7: [0, 0], 8: [0, 0], 9: [0, 0], 10: [0, 0], 11: ['Az', 0], 12: [0, 0], 13: [0, 0], 14: [0, 0], 15: [0, 0], 16: [0, 0], 17: [0, 0], 18: ['Am', 0], 19: [0, 0], 20: [0, 0], 21: [0, 0], 22: [0, 0], 23: [0, 0], 24: [0, 0], 25: [0, 0], 26: [0, 0], 27: [0, 0], 28: [0, 0], 29: [0, 0], 30: [0, 0], 31: [0, 0], 32: [0, 0], 33: [0, 0], 34: ['Az', 0], 35: [0, 0], 36: [0, 0], 37: [0, 0], 38: [0, 0], 39: [0, 0], 40: [0, 0], 41: [0, 0], 42: [0, 0], 43: [0, 0], 44: [0, 0], 45: [0, 0], 46: [0, 0], 47: [0, 0], 48: ['Am', 0], 49: [0, 0], 50: [0, 0], 51: [0, 0], 52: [0, 0], 53: [0, 0], 54: [0, 0], 55: [0, 0], 56: [0, 0], 57: [0, 0], 58: [0, 0], 59: [0, 0], 60: [0, 0], 61: [0, 0], 62: [0, 0], 63: [0, 0], 64: [0, 0], 65: [0, 0], 66: [0, 0], 67: [0, 0], 68: [0, 0], 'Am1': [0, 0], 'Am2': [0, 0], 'Am3': [0, 0], 'Am4': [0, 0], 'Am5': [0, 0], 'Am6': ['Am', 0], 'Am7': [0, 0], 'Am8': [0, 0, 0, 0], 'Az1': [0, 0], 'Az2': [0, 0], 'Az3': [0, 0], 'Az4': [0, 0], 'Az5': [0, 0], 'Az6': [0, 0], 'Az7': [0, 0], 'Az8': ['Az', 0, 0, 0], 'R1': [0, 0], 'R2': [0, 0], 'R3': [0, 0], 'R4': [0, 0], 'R5': [0, 0], 'R6': [0, 0], 'R7': [0, 0], 'R8': [0, 0, 0, 0], 'V1': [0, 0], 'V2': [0, 0], 'V3': [0, 0], 'V4': [0, 0], 'V5': [0, 0], 'V6': [0, 0], 'V7': [0, 0], 'V8': [0, 0, 0, 0], 'Am': 1, 'Az': 1, 'R': 4, 'V': 4}

tablero_aleatorio15 = {1: [0, 0], 2: [0, 0], 3: [0, 0], 4: [0, 0], 5: ['Am', 0], 6: [0, 0], 7: [0, 0], 8: [0, 0], 9: [0, 0], 10: [0, 0], 11: [0, 0], 12: [0, 0], 13: [0, 0], 14: [0, 0], 15: [0, 0], 16: [0, 0], 17: [0, 0], 18: [0, 0], 19: [0, 0], 20: [0, 0], 21: [0, 0], 22: [0, 0], 23: [0, 0], 24: [0, 0], 25: [0, 0], 26: [0, 0], 27: [0, 0], 28: [0, 0], 29: ['Az', 0], 30: [0, 0], 31: [0, 0], 32: [0, 0], 33: [0, 0], 34: [0, 0], 35: [0, 0], 36: [0, 0], 37: [0, 0], 38: [0, 0], 39: [0, 0], 40: [0, 0], 41: [0, 0], 42: [0, 0], 43: [0, 0], 44: [0, 0], 45: ['Am', 0], 46: [0, 0], 47: [0, 0], 48: [0, 0], 49: [0, 0], 50: [0, 0], 51: [0, 0], 52: [0, 0], 53: [0, 0], 54: [0, 0], 55: [0, 0], 56: [0, 0], 57: [0, 0], 58: [0, 0], 59: [0, 0], 60: [0, 0], 61: [0, 0], 62: [0, 0], 63: [0, 0], 64: [0, 0], 65: [0, 0], 66: [0, 0], 67: [0, 0], 68: ['Az', 0], 'Am1': [0, 0], 'Am2': [0, 0], 'Am3': [0, 0], 'Am4': [0, 0], 'Am5': [0, 0], 'Am6': [0, 0], 'Am7': [0, 0], 'Am8': [0, 0, 0, 0], 'Az1': [0, 0], 'Az2': [0, 0], 'Az3': [0, 0], 'Az4': [0, 0], 'Az5': [0, 0], 'Az6': [0, 0], 'Az7': [0, 0], 'Az8': [0, 0, 0, 0], 'R1': [0, 0], 'R2': [0, 0], 'R3': [0, 0], 'R4': [0, 0], 'R5': [0, 0], 'R6': [0, 0], 'R7': [0, 0], 'R8': [0, 0, 0, 0], 'V1': [0, 0], 'V2': [0, 0], 'V3': [0, 0], 'V4': [0, 0], 'V5': [0, 0], 'V6': [0, 0], 'V7': [0, 0], 'V8': [0, 0, 0, 0], 'Am': 2, 'Az': 2, 'R': 4, 'V': 4}

tablero_aleatorio16 = {1: [0, 0], 2: [0, 0], 3: [0, 0], 4: [0, 0], 5: [0, 0], 6: [0, 0], 7: [0, 0], 8: [0, 0], 9: [0, 0], 10: [0, 0], 11: [0, 0], 12: [0, 0], 13: [0, 0], 14: [0, 0], 15: [0, 0], 16: [0, 0], 17: [0, 0], 18: [0, 0], 19: [0, 0], 20: [0, 0], 21: [0, 0], 22: [0, 0], 23: [0, 0], 24: [0, 0], 25: [0, 0], 26: [0, 0], 27: [0, 0], 28: [0, 0], 29: [0, 0], 30: [0, 0], 31: [0, 0], 32: [0, 0], 33: [0, 0], 34: [0, 0], 35: [0, 0], 36: [0, 0], 37: [0, 0], 38: [0, 0], 39: [0, 0], 40: [0, 0], 41: [0, 0], 42: [0, 0], 43: [0, 0], 44: [0, 0], 45: ['R', 0], 46: [0, 0], 47: [0, 0], 48: [0, 0], 49: [0, 0], 50: [0, 0], 51: [0, 0], 52: [0, 0], 53: [0, 0], 54: [0, 0], 55: [0, 0], 56: [0, 0], 57: [0, 0], 58: [0, 0], 59: [0, 0], 60: [0, 0], 61: [0, 0], 62: [0, 0], 63: [0, 0], 64: [0, 0], 65: [0, 0], 66: [0, 0], 67: [0, 0], 68: ['Az', 0], 'Am1': [0, 0], 'Am2': [0, 0], 'Am3': [0, 0], 'Am4': [0, 0], 'Am5': [0, 0], 'Am6': [0, 0], 'Am7': [0, 0], 'Am8': ['Am', 0, 0, 0], 'Az1': [0, 0], 'Az2': [0, 0], 'Az3': [0, 0], 'Az4': [0, 0], 'Az5': [0, 0], 'Az6': [0, 0], 'Az7': [0, 0], 'Az8': [0, 0, 0, 0], 'R1': [0, 0], 'R2': [0, 0], 'R3': [0, 0], 'R4': [0, 0], 'R5': [0, 0], 'R6': [0, 0], 'R7': [0, 0], 'R8': [0, 0, 0, 0], 'V1': [0, 0], 'V2': [0, 0], 'V3': [0, 0], 'V4': [0, 0], 'V5': [0, 0], 'V6': [0, 0], 'V7': [0, 0], 'V8': ['V', 0, 0, 0], 'Am': 3, 'Az': 3, 'R': 3, 'V': 3}

tablero_aleatorio17 = {1: [0, 0], 2: ['V', 0], 3: [0, 0], 4: [0, 0], 5: [0, 0], 6: [0, 0], 7: [0, 0], 8: [0, 0], 9: [0, 0], 10: [0, 0], 11: [0, 0], 12: [0, 0], 13: [0, 0], 14: [0, 0], 15: [0, 0], 16: [0, 0], 17: [0, 0], 18: [0, 0], 19: [0, 0], 20: [0, 0], 21: [0, 0], 22: [0, 0], 23: [0, 0], 24: [0, 0], 25: [0, 0], 26: ['Am', 0], 27: [0, 0], 28: [0, 0], 29: [0, 0], 30: [0, 0], 31: [0, 0], 32: [0, 0], 33: [0, 0], 34: [0, 0], 35: [0, 0], 36: [0, 0], 37: [0, 0], 38: [0, 0], 39: ['R', 0], 40: [0, 0], 41: [0, 0], 42: [0, 0], 43: [0, 0], 44: [0, 0], 45: [0, 0], 46: [0, 0], 47: [0, 0], 48: [0, 0], 49: [0, 0], 50: [0, 0], 51: [0, 0], 52: [0, 0], 53: [0, 0], 54: [0, 0], 55: [0, 0], 56: ['V', 0], 57: [0, 0], 58: [0, 0], 59: [0, 0], 60: [0, 0], 61: [0, 0], 62: [0, 0], 63: [0, 0], 64: [0, 0], 65: [0, 0], 66: [0, 0], 67: [0, 0], 68: [0, 0], 'Am1': [0, 0], 'Am2': [0, 0], 'Am3': [0, 0], 'Am4': [0, 0], 'Am5': [0, 0], 'Am6': [0, 0], 'Am7': [0, 0], 'Am8': [0, 0, 0, 0], 'Az1': [0, 0], 'Az2': [0, 0], 'Az3': [0, 0], 'Az4': [0, 0], 'Az5': [0, 0], 'Az6': [0, 0], 'Az7': [0, 0], 'Az8': [0, 0, 0, 0], 'R1': [0, 0], 'R2': [0, 0], 'R3': [0, 0], 'R4': [0, 0], 'R5': [0, 0], 'R6': [0, 0], 'R7': [0, 0], 'R8': [0, 0, 0, 0], 'V1': [0, 0], 'V2': [0, 0], 'V3': [0, 0], 'V4': [0, 0], 'V5': [0, 0], 'V6': [0, 0], 'V7': [0, 0], 'V8': [0, 0, 0, 0], 'Am': 3, 'Az': 4, 'R': 3, 'V': 2}

tablero_aleatorio18 = {1: [0, 0], 2: [0, 0], 3: [0, 0], 4: [0, 0], 5: [0, 0], 6: [0, 0], 7: ['R', 0], 8: [0, 0], 9: [0, 0], 10: [0, 0], 11: [0, 0], 12: [0, 0], 13: [0, 0], 14: [0, 0], 15: [0, 0], 16: [0, 0], 17: [0, 0], 18: [0, 0], 19: [0, 0], 20: [0, 0], 21: [0, 0], 22: [0, 0], 23: [0, 0], 24: [0, 0], 25: [0, 0], 26: [0, 0], 27: [0, 0], 28: [0, 0], 29: [0, 0], 30: [0, 0], 31: ['Az', 0], 32: [0, 0], 33: [0, 0], 34: ['V', 0], 35: [0, 0], 36: [0, 0], 37: [0, 0], 38: [0, 0], 39: [0, 0], 40: [0, 0], 41: [0, 0], 42: [0, 0], 43: ['R', 0], 44: [0, 0], 45: [0, 0], 46: [0, 0], 47: [0, 0], 48: [0, 0], 49: [0, 0], 50: ['Am', 0], 51: [0, 0], 52: [0, 0], 53: [0, 0], 54: [0, 0], 55: [0, 0], 56: [0, 0], 57: [0, 0], 58: [0, 0], 59: [0, 0], 60: [0, 0], 61: [0, 0], 62: [0, 0], 63: ['Az', 0], 64: [0, 0], 65: [0, 0], 66: [0, 0], 67: [0, 0], 68: [0, 0], 'Am1': [0, 0], 'Am2': [0, 0], 'Am3': [0, 0], 'Am4': [0, 0], 'Am5': [0, 0], 'Am6': [0, 0], 'Am7': [0, 0], 'Am8': [0, 0, 0, 0], 'Az1': [0, 0], 'Az2': [0, 0], 'Az3': [0, 0], 'Az4': [0, 0], 'Az5': [0, 0], 'Az6': [0, 0], 'Az7': [0, 0], 'Az8': [0, 0, 0, 0], 'R1': [0, 0], 'R2': [0, 0], 'R3': [0, 0], 'R4': [0, 0], 'R5': [0, 0], 'R6': [0, 0], 'R7': [0, 0], 'R8': [0, 0, 0, 0], 'V1': [0, 0], 'V2': [0, 0], 'V3': [0, 0], 'V4': [0, 0], 'V5': [0, 0], 'V6': [0, 0], 'V7': [0, 0], 'V8': [0, 0, 0, 0], 'Am': 3, 'Az': 2, 'R': 2, 'V': 3}

tablero_aleatorio19 ={1: [0, 0], 2: ['R', 0], 3: [0, 0], 4: [0, 0], 5: [0, 0], 6: [0, 0], 7: [0, 0], 8: [0, 0], 9: [0, 0], 10: [0, 0], 11: [0, 0], 12: [0, 0], 13: [0, 0], 14: [0, 0], 15: [0, 0], 16: [0, 0], 17: [0, 0], 18: [0, 0], 19: [0, 0], 20: [0, 0], 21: [0, 0], 22: [0, 0], 23: [0, 0], 24: [0, 0], 25: [0, 0], 26: [0, 0], 27: [0, 0], 28: [0, 0], 29: [0, 0], 30: [0, 0], 31: [0, 0], 32: [0, 0], 33: [0, 0], 34: [0, 0], 35: [0, 0], 36: ['V', 0], 37: [0, 0], 38: [0, 0], 39: [0, 0], 40: [0, 0], 41: [0, 0], 42: [0, 0], 43: [0, 0], 44: ['R', 0], 45: [0, 0], 46: ['Az', 0], 47: [0, 0], 48: [0, 0], 49: [0, 0], 50: [0, 0], 51: [0, 0], 52: [0, 0], 53: [0, 0], 54: [0, 0], 55: [0, 0], 56: [0, 0], 57: [0, 0], 58: [0, 0], 59: [0, 0], 60: [0, 0], 61: [0, 0], 62: [0, 0], 63: [0, 0], 64: [0, 0], 65: [0, 0], 66: [0, 0], 67: [0, 0], 68: [0, 0], 'Am1': [0, 0], 'Am2': [0, 0], 'Am3': [0, 0], 'Am4': ['Am', 0], 'Am5': [0, 0], 'Am6': [0, 0], 'Am7': [0, 0], 'Am8': [0, 0, 0, 0], 'Az1': [0, 0], 'Az2': [0, 0], 'Az3': [0, 0], 'Az4': [0, 0], 'Az5': [0, 0], 'Az6': [0, 0], 'Az7': [0, 0], 'Az8': ['Az', 0, 0, 0], 'R1': [0, 0], 'R2': [0, 0], 'R3': [0, 0], 'R4': [0, 0], 'R5': [0, 0], 'R6': [0, 0], 'R7': [0, 0], 'R8': [0, 0, 0, 0], 'V1': [0, 0], 'V2': [0, 0], 'V3': [0, 0], 'V4': [0, 0], 'V5': [0, 0], 'V6': [0, 0], 'V7': [0, 0], 'V8': [0, 0, 0, 0], 'Am': 3, 'Az': 2, 'R': 2, 'V': 3}

tablero_aleatorio20 = {1: [0, 0], 2: [0, 0], 3: [0, 0], 4: [0, 0], 5: [0, 0], 6: [0, 0], 7: [0, 0], 8: [0, 0], 9: [0, 0], 10: [0, 0], 11: [0, 0], 12: [0, 0], 13: [0, 0], 14: [0, 0], 15: [0, 0], 16: [0, 0], 17: [0, 0], 18: [0, 0], 19: [0, 0], 20: [0, 0], 21: [0, 0], 22: [0, 0], 23: [0, 0], 24: [0, 0], 25: [0, 0], 26: [0, 0], 27: [0, 0], 28: [0, 0], 29: [0, 0], 30: [0, 0], 31: [0, 0], 32: [0, 0], 33: [0, 0], 34: [0, 0], 35: [0, 0], 36: [0, 0], 37: [0, 0], 38: [0, 0], 39: [0, 0], 40: [0, 0], 41: [0, 0], 42: [0, 0], 43: [0, 0], 44: [0, 0], 45: [0, 0], 46: [0, 0], 47: [0, 0], 48: [0, 0], 49: [0, 0], 50: ['Az', 0], 51: [0, 0], 52: [0, 0], 53: [0, 0], 54: [0, 0], 55: [0, 0], 56: [0, 0], 57: [0, 0], 58: [0, 0], 59: ['R', 0], 60: [0, 0], 61: [0, 0], 62: [0, 0], 63: [0, 0], 64: [0, 0], 65: [0, 0], 66: [0, 0], 67: [0, 0], 68: ['Am', 0], 'Am1': [0, 0], 'Am2': [0, 0], 'Am3': [0, 0], 'Am4': [0, 0], 'Am5': [0, 0], 'Am6': [0, 0], 'Am7': [0, 0], 'Am8': [0, 0, 0, 0], 'Az1': [0, 0], 'Az2': [0, 0], 'Az3': [0, 0], 'Az4': [0, 0], 'Az5': [0, 0], 'Az6': [0, 0], 'Az7': [0, 0], 'Az8': [0, 0, 0, 0], 'R1': [0, 0], 'R2': [0, 0], 'R3': [0, 0], 'R4': [0, 0], 'R5': [0, 0], 'R6': [0, 0], 'R7': [0, 0], 'R8': [0, 0, 0, 0], 'V1': [0, 0], 'V2': [0, 0], 'V3': [0, 0], 'V4': [0, 0], 'V5': [0, 0], 'V6': [0, 0], 'V7': [0, 0], 'V8': ['V', 0, 0, 0], 'Am': 3, 'Az': 3, 'R': 3, 'V': 3}

seguros = [5,12,17,22,29,34,39,46,51,56,63,68]

# Devuelve True si la ficha se encuentra en sus últimas casillas y el numero de la 
# posición, y False y 0 en caso contrario.
def ultimas_casillas(ficha,pos):
    if ficha == 'Am':
        for i in range(1,8):
            if pos == f'Am{i}':
                return True,i
    elif ficha == 'Az':
        for i in range(1,8):
            if pos == f'Az{i}':
                return True,i
    elif ficha == 'R':
        for i in range(1,8):
            if pos == f'R{i}':
                return True,i
    else:
        for i in range(1,8):
            if pos == f'V{i}':
                return True,i
    return False,0


# Devueleve True si no es bloqueado por una barrera o no llega a un seguro en el
# que ya hay dos fichas y False en caso contrario.
def legal(tablero,ficha,pos,dado):
    if dado == 6:
        if ficha == 'Am' or ficha == 'R':
            if tablero['Am'] == 0 and tablero['R'] == 0:
                    dado = 7
        else:
            if tablero['Az'] == 0 and tablero['V'] == 0:
                    dado = 7   
    aux = ultimas_casillas(ficha,pos)
    if aux[0]:
        if aux[1]+dado > 8:
            return False
    if hay_barreras(tablero,ficha,pos,dado):
        return False
    return True


def legal_mov_leg(tablero,ficha,pos,dado):
    if ficha == 'Am' or ficha == 'R':
        turno = 1
    else:
        turno = 2
    legales = 0
    leg = []
    if legal(tablero, ficha, pos, dado):
        barrera = barreras(tablero,turno)
        if (dado == 6 or dado==7) and barrera[0] != 0:
            for i in barrera[1]:
                if legal(tablero,tablero[i][0],i,dado):
                    legales += 1
                    leg.append(i)
            if legales != 0:
                if pos not in leg:
                    return False
        return True
    else:
        return False
                                 
    

#Devuelve True si hay barreras o si no se puede avanzar porque la casilla de 
#destino tiene ya dos fichas.
def hay_barreras(tablero,ficha,pos,dado):
    if type(pos) == str:
        for i in range(1,dado+1):
            if ficha == 'Am' or ficha == 'Az':    
                numero = int(pos[2]) +i
            else:
                numero = int(pos[1]) +i
            if numero != 8:
                casilla = ficha + str(numero)
                if tablero[casilla][0] != 0 and tablero[casilla][0] == tablero[casilla][1]:
                    return True 
    else:    
        if ficha == 'Am':
            if pos+dado <= 68:
                for i in range(1,dado+1):
                    casilla = pos+i
                    if tablero[casilla][0] != 0 and tablero[casilla][0] == tablero[casilla][1]:
                        return True
                if tablero[pos+dado][0] != 0 and tablero[pos+dado][1] != 0:
                    return True
            else:
                if pos+dado-68 > 8:
                    return True
                for i in range(pos,69):
                    casilla = i
                    if tablero[casilla][0] != 0 and tablero[casilla][0] == tablero[casilla][1]:
                        return True
                if pos+dado>68:
                    dado_nuevo = pos+dado-68
                    pos_nueva = 'Am0'
                    solucion = hay_barreras(tablero,'Am',pos_nueva,dado_nuevo)
                    if solucion == True:
                        return True
        elif ficha == 'R':
            if pos+dado <= 34 or pos > 34:
                for i in range(1,dado+1):
                    casilla = pos+i
                    if casilla != 68:
                        casilla = casilla%68
                    if tablero[casilla][0] != 0 and tablero[casilla][0] == tablero[casilla][1]:
                        return True
                suma_dado = pos+dado
                if suma_dado != 68:
                    suma_dado = suma_dado%68
                if tablero[suma_dado][0] != 0 and tablero[suma_dado][1] != 0:
                    return True
            else:
                if pos+dado-34 > 8:
                    return True
                for i in range(pos,35):
                    casilla = i
                    if tablero[casilla][0] != 0 and tablero[casilla][0] == tablero[casilla][1]:
                        return True
                if pos+dado>34:
                    dado_nuevo = pos+dado-34
                    pos_nueva = 'R0'
                    solucion = hay_barreras(tablero,'R',pos_nueva,dado_nuevo)
                    if solucion == True:
                        return True
        elif ficha == 'Az':
            if pos+dado <= 17 or pos > 17:
                for i in range(1,dado+1):
                    casilla = pos+i
                    if casilla != 68:
                        casilla = casilla%68
                    if tablero[casilla][0] != 0 and tablero[casilla][0] == tablero[casilla][1]:
                        return True
                suma_dado = pos+dado
                if suma_dado != 68:
                    suma_dado = suma_dado%68
                if tablero[suma_dado][0] != 0 and tablero[suma_dado][1] != 0:
                    return True
            else:
                if pos+dado-17 > 8:
                    return True
                for i in range(pos,18):
                    casilla = i
                    if tablero[casilla][0] != 0 and tablero[casilla][0] == tablero[casilla][1]:
                        return True
                if pos+dado>17:
                    dado_nuevo = pos+dado-17
                    pos_nueva = 'Az0'
                    solucion = hay_barreras(tablero,'Az',pos_nueva,dado_nuevo)
                    if solucion == True:
                        return True
        else:
            if pos+dado <= 51 or pos > 51:
                for i in range(1,dado+1):
                    casilla = pos+i
                    if casilla != 68:
                        casilla = casilla%68
                    if tablero[casilla][0] != 0 and tablero[casilla][0] == tablero[casilla][1]:
                        return True
                suma_dado = pos+dado
                if suma_dado != 68:
                    suma_dado = suma_dado%68
                if tablero[suma_dado][0] != 0 and tablero[suma_dado][1] != 0:
                    return True
            else:
                if pos+dado-51 > 8:
                    return True
                for i in range(pos,52):
                    casilla = i
                    if tablero[casilla][0] != 0 and tablero[casilla][0] == tablero[casilla][1]:
                        return True
                if pos+dado>51:
                    dado_nuevo = pos+dado-51
                    pos_nueva = 'V0'
                    solucion = hay_barreras(tablero,'V',pos_nueva,dado_nuevo)
                    if solucion == True:
                        return True
    return False

# Devuelve la posicion a la que avanza la casilla. Siempre que hay una llamada a
# avanzar tiene que haber una antes a legal.
def avanzar(tablero,ficha,pos,dado):
    if dado == 6:
        if ficha == 'Am' or ficha == 'R':
            if tablero['Am'] == 0 and tablero['R'] == 0:
                    dado = 7
        else:
            if tablero['Az'] == 0 and tablero['V'] == 0:
                    dado = 7
    aux = ultimas_casillas(ficha,pos)
    if pos == (ficha + '8'):
        posicion = pos
    if aux[0] == True:
        posicion = ficha + str(aux[1]+dado)
    else:
        if ficha == 'Am':
            if dado+pos <= 68:
                posicion = dado + pos
            else:
                posicion = ficha + str((dado+pos)%68)
        elif ficha == 'R':
            if pos > 34 or dado+pos <= 34:
                posicion = (dado + pos)%68
                if posicion == 0:
                    posicion = 68
            else:
                posicion = ficha + str((dado+pos)%34)
        elif ficha == 'Az':
            if pos > 17 or dado+pos <= 17:
                posicion = (dado + pos)%68
                if posicion == 0:
                    posicion = 68
            else:
                posicion = ficha + str((dado+pos)%17)
        else:
            if pos > 51 or dado+pos <= 51:
                posicion = (dado + pos)%68
                if posicion == 0:
                    posicion = 68
            else:
                posicion = ficha + str((dado+pos)%51)
    return posicion


#SOLO SON BARRERAS DEL MISMO COLOR NO DEL MISMO JUGADOR
def barreras(tablero,turno):
    n_barreras = 0
    pos = []
    for i in tablero:
        barrera = 0
        color1 = 0
        color2 = 0
        if type(i)==str:
            pass
        else:
            for j in tablero[i]:
                if turno == 1:
                    if j == 'Am':
                        barrera += 1
                        color1 += 1
                    elif j == 'R':
                        barrera +=1
                        color2 +=1
                    if barrera == 2 and (color1 == 2 or color2 == 2):
                        n_barreras += 1
                        pos.append(i)
                else:
                    if j == 'Az':
                        barrera += 1
                        color1 += 1
                    elif j == 'V':
                        barrera +=1
                        color2 +=1
                    if barrera == 2 and (color1 == 2 or color2 == 2):
                        n_barreras += 1
                        pos.append(i)
    return n_barreras,pos                   

def movimientos_legales(tablero,dado,turno):
    mov_leg = [0,[]]
    if turno == 1:
        if dado == 5 and (tablero['Am'] != 0 or tablero['R'] != 0):
            if tablero['Am'] != 0:
                if (tablero[5][0]=='Am' or tablero[5][0]=='R') and (tablero[5][1]=='Am' or tablero[5][1]=='R'):
                    pass
                else:
                    mov_leg[0] = mov_leg[0]+1
                    mov_leg[1].append(('Am',5))
            if tablero['R'] != 0:
                if (tablero[39][0]=='Am' or tablero[39][0]=='R') and (tablero[39][1]=='Am' or tablero[39][1]=='R'):
                    pass
                else:
                    mov_leg[0] = mov_leg[0]+1
                    mov_leg[1].append(('R',39))
            if mov_leg[0] !=0:
                return mov_leg
    else:
        if dado == 5 and (tablero['Az'] != 0 or tablero['V'] != 0):
            if tablero['Az'] != 0:
                if (tablero[22][0]=='Az' or tablero[22][0]=='V') and (tablero[22][1]=='Az' or tablero[22][1]=='V'):
                    pass
                else:
                    mov_leg[0] = mov_leg[0]+1
                    mov_leg[1].append(('Az',22))
            if tablero['V'] != 0:
                if (tablero[56][0]=='Az' or tablero[56][0]=='V') and (tablero[56][1]=='Az' or tablero[56][1]=='V'):
                    pass
                else:
                    mov_leg[0] = mov_leg[0]+1
                    mov_leg[1].append(('V',56))
            if mov_leg[0] !=0:
                return mov_leg
    for i in tablero:
        if i == 'Am' or i == 'Az' or i == 'R' or i == 'V' or i == 'Am8' or i == 'Az8' or i == 'R8' or i == 'V8':
            pass
        else:
            if turno == 1:
                if (tablero[i][0] == 'Am' and tablero[i][1] == 'R') or (tablero[i][0] == 'R' and tablero[i][1] == 'Am'):
                    if legal_mov_leg(tablero, tablero[i][0], i, dado):
                        mov_leg[0] = mov_leg[0] +2
                        mov_leg[1].append((tablero[i][0],avanzar(tablero, tablero[i][0], i, dado)))
                        mov_leg[1].append((tablero[i][1],avanzar(tablero, tablero[i][1], i, dado)))
                elif tablero[i][0] == 'Am' or tablero[i][0] == 'R':
                    if legal_mov_leg(tablero, tablero[i][0], i, dado):
                        mov_leg[0] = mov_leg[0] + 1
                        mov_leg[1].append((tablero[i][0],avanzar(tablero, tablero[i][0], i, dado)))
                elif tablero[i][1] == 'Am' or tablero[i][1] == 'R':
                    if legal_mov_leg(tablero, tablero[i][1], i, dado):
                        mov_leg[0] = mov_leg[0] + 1
                        mov_leg[1].append((tablero[i][1],avanzar(tablero, tablero[i][1], i, dado)))
            else:
                if (tablero[i][0] == 'Az' and tablero[i][1] == 'V') or (tablero[i][0] == 'V' and tablero[i][1] == 'Az'):
                    if legal_mov_leg(tablero, tablero[i][0], i, dado):
                        mov_leg[0] = mov_leg[0] +2
                        mov_leg[1].append((tablero[i][0],avanzar(tablero, tablero[i][0], i, dado)))
                        mov_leg[1].append((tablero[i][1],avanzar(tablero, tablero[i][1], i, dado)))
                elif tablero[i][0] == 'Az' or tablero[i][0] == 'V':
                    if legal_mov_leg(tablero, tablero[i][0], i, dado):
                        mov_leg[0] = mov_leg[0] + 1
                        mov_leg[1].append((tablero[i][0],avanzar(tablero, tablero[i][0], i, dado)))
                elif tablero[i][1] == 'Az' or tablero[i][1] == 'V':
                    if legal_mov_leg(tablero, tablero[i][1], i, dado):
                        mov_leg[0] = mov_leg[0] + 1
                        mov_leg[1].append((tablero[i][1],avanzar(tablero, tablero[i][1], i, dado)))
    return mov_leg

    
def hay_doses(lista):
    for i in lista:
        if i ==2:
            return True
    return False

def aux_calcular_prob(lista,prob,l):
    if lista ==[]:
        return 1
    n_doses = 0
    for j in lista:
        if j == 2:
            l.append(True)
            n_doses += 1
        else:
            if len(l) == 0:
                n_doses += 1 
            elif l[len(l)-1]:
                n_doses += 1  
            l.append(False)
    l_aux = []
    l_aux2 = []
    k = 0
    while k <len(l):
        if l[k] == False and k == len(l)-1:
            a = lista[k]-1
            l_aux2.append(a)
            l_aux.append(l_aux2)
        elif l[k] == False:
            a = lista[k]-1
            l_aux2.append(a)
        else:
            if l_aux2 != []:
                l_aux.append(l_aux2)
            l_aux2 = []
        k += 1
    prob = prob/n_doses
    probabilidades = []
    for j in range(len(l)):
        if l[j] == True:
            probabilidades.append(prob)
        else:
            probabilidades.append(0)
    lista_prob_aux = []
    for j in l_aux:
        lista_prob_aux.append(aux_calcular_prob(j, prob, []))
    lista_prob = [elemento for sublista in lista_prob_aux for elemento in sublista]
    cont = 0
    for j in range(len(probabilidades)):
        if probabilidades[j] == 0:
            probabilidades[j] = lista_prob[cont] 
            cont += 1
    return probabilidades
        
        
              
def calcular_prob(lista,prob):
    probabilidades = []
    for i in lista:
        if i == 1:
            probabilidades.append(prob)
        else:
            probabilidades_lista = aux_calcular_prob(i,prob,[])
            for j in probabilidades_lista:
                probabilidades.append(j)
    return probabilidades
                
                
def ocupadas(tablero,lista,turno):
    l = []
    for i in lista:
        if turno == 1:
            if tablero[i[1]][0] == 'Am' or tablero[i[1]][0] == 'R' or ((i[1] in seguros) and (tablero[i[1]][0] !=0)):
                l.append(True)
            else:
                l.append(False)
        else:
            if tablero[i[1]][0] == 'Az' or tablero[i[1]][0] == 'V' or ((i[1] in seguros) and (tablero[i[1]][0] !=0)):
                l.append(True)
            else:
                l.append(False)          
    return l           
                
def numero_anterior(numero,dado,color):
    if type(numero) == int:
        numero_final = numero-dado
        if numero_final>0:
            return numero_final
        else:
            return 69+numero_final-1
    else:
        if color == 'Am':
            numero_final = int(numero[2])-dado
            if numero_final >= 1:
                numero_aux = color+str(numero_final)
                return numero_aux
            else:
                return 68+numero_final
        elif color == 'R':
             numero_final = int(numero[1])-dado
             if numero_final >= 1:
                 numero_aux = color+str(numero_final)
                 return numero_aux
             else:
                 return 34+numero_final
        elif color == 'Az':
            numero_final = int(numero[2])-dado
            if numero_final >= 1:
                numero_aux = color+str(numero_final)
                return numero_aux
            else:
                return 17+numero_final
        else:
            numero_final = int(numero[1])-dado
            if numero_final >= 1:
               numero_aux = color+str(numero_final)
               return numero_aux
            else:
                return 51+numero_final
            
def modificar_jugadas(lista,i):
    l = []
    for j in range(len(lista)):  
         if j == i-1:
             l_aux = lista[i-1]+lista[i][:-1]
             l.append(l_aux)
         elif j== i:
             l.append(1)
         else:
            l.append(lista[j])
    return l
        
def arreglar_errores(valores,lista,mov_leg):
    prob1 = (1/6)*(1/mov_leg[0])
    probabilidades = []
    primero = 0
    for i in range(len(valores)):
        if valores[i] == 1:
            primero = 0
            probabilidades.append(prob1)
        else:
            if primero == 0:
                j = i
                k = 0
                for j in range(i,len(valores)):
                    if valores[j]!=1:
                        k +=1
                    else:
                        break
                prob_aux = prob1/k
                primero = 1
                probabilidades.append(prob_aux)
            else:
                probabilidades.append(prob_aux)
    l = []
    for i in range(len(lista)):
        a = (lista[i][0],probabilidades[i])
        l.append(a)
    return l

def analizar_jugadas(jugadas):
    for i in jugadas:
        if type(i) == list:
            if 1 in i:
                return False
    return True
    


def aux_probabilidades(lista,tablero,dado,turno):
    if dado == 6:
        if turno ==1:
            if tablero['Am'] == 0 and tablero['R'] == 0:
                    dado = 7
        else:
            if tablero['Az'] == 0 and tablero['V'] == 0:
                    dado = 7
    prob = 1
    probabilidades = []
    valores = []
    for i in range(len(lista)):
        valores.append(lista[i][1])
    jugadas = []
    numero = 0
    mov_leg = movimientos_legales(tablero,dado,turno)
    ocup = ocupadas(tablero, mov_leg[1], turno)
    i = 0
    l = []
    if len(valores) == len(mov_leg[1]) and mov_leg[0] != 0:
        for i in range(len(valores)):
            probabilidades.append((1/6)*(1/mov_leg[0]))
    else:
        if dado == 5 and (turno == 1) and ((tablero["Am"]!=0 and ((tablero[5][0]!='Am' and tablero[5][0]!='R') or (tablero[5][1]!='Am' and tablero[5][1]!='R'))) or (tablero["R"]!=0 and ((tablero[39][0]!='Am' and tablero[39][0]!='R') or (tablero[39][1]!='Am' and tablero[39][1]!='R')))):
            if (tablero["Am"]!=0 and ((tablero[5][0]!='Am' and tablero[5][0]!='R') or (tablero[5][1]!='Am' and tablero[5][1]!='R'))) and (tablero["R"]!=0 and ((tablero[39][0]!='Am' and tablero[39][0]!='R') or (tablero[39][1]!='Am' and tablero[39][1]!='R'))):
                i = 0
                if valores[i] == 1:
                    jugadas.append(1)
                    i +=1
                else:
                    while lista[i][0]["R"] == tablero["R"]:
                        l.append(valores[i])
                        i +=1
                    jugadas.append(l)
                    l = []
                if valores[i] == 1:
                    jugadas.append(1)
                    i +=1
                else:
                    while i<len(valores):
                        l.append(valores[i])
                        i +=1
                    jugadas.append(l)
            else:
                if valores == [1]:
                    jugadas = valores
                else:
                    jugadas = [valores] 
        elif dado == 5 and (turno == 2) and ((tablero["Az"]!=0 and ((tablero[22][0]!='Az' and tablero[22][0]!='V') or (tablero[22][1]!='Az' and tablero[22][1]!='V'))) or (tablero["V"]!=0 and ((tablero[56][0]!='Az' and tablero[56][0]!='V') or (tablero[56][1]!='Az' and tablero[56][1]!='V')))):
            if (tablero["Az"]!=0 and ((tablero[22][0]!='Az' and tablero[22][0]!='V') or (tablero[22][1]!='Az' and tablero[22][1]!='V'))) and (tablero["V"]!=0 and ((tablero[56][0]!='Az' and tablero[56][0]!='V') or (tablero[56][1]!='Az' and tablero[56][1]!='V'))):
                i = 0
                if valores[i] == 1:
                    jugadas.append(1)
                    i +=1
                else:
                    while lista[i][0]["V"] == tablero["V"]:
                        l.append(valores[i])
                        i +=1
                    jugadas.append(l)
                    l = []
                if valores[i] == 1:
                    jugadas.append(1)
                    i +=1
                else:
                    while i<len(valores):
                        l.append(valores[i])
                        i +=1
                    jugadas.append(l)
            else:
                if valores == [1]:
                    jugadas = valores
                else:
                    jugadas = [valores]            
        else:
            while i < len(valores):
                if valores[i] == 1:
                    jugadas.append(1)
                    numero += 1
                    i += 1
                else:
                    l_aux = []
                    if numero == mov_leg[0]-1:
                        while i < len(valores):
                            l_aux.append(valores[i])
                            if valores[i] == 1:
                                lista_resultado = arreglar_errores(valores,lista,mov_leg)
                                return lista_resultado
                            i += 1
                            
                        jugadas.append(l_aux)
                    else:
                        if numero+1 >= len(ocup)-1:
                            lista_resultado = arreglar_errores(valores,lista,mov_leg)
                            return lista_resultado
                        if ocup[numero+1]:
                            if not (tablero[numero_anterior(mov_leg[1][numero+1][1],dado,mov_leg[1][numero+1][0])] == lista[i][0][numero_anterior(mov_leg[1][numero+1][1],dado,mov_leg[1][numero+1][0])]) and not (lista[i][0][mov_leg[1][numero+1][1]][1] != mov_leg[1][numero+1][0]):
                                l_aux.append(valores[i])
                                i += 1
                            else:
                                while (tablero[numero_anterior(mov_leg[1][numero+1][1],dado,mov_leg[1][numero+1][0])] == lista[i][0][numero_anterior(mov_leg[1][numero+1][1],dado,mov_leg[1][numero+1][0])] or (lista[i][0][mov_leg[1][numero+1][1]][1] != mov_leg[1][numero+1][0])) :
                                    if (valores[i] == 1):
                                        jugadas.append(1)
                                        i += 1
                                        break
                                    l_aux.append(valores[i])
                                    i += 1
                                    if i == len(valores):
                                        lista_resultado = arreglar_errores(valores,lista,mov_leg)
                                        return lista_resultado
                            jugadas.append(l_aux)
                        else:
                            if not (tablero[numero_anterior(mov_leg[1][numero+1][1],dado,mov_leg[1][numero+1][0])] == lista[i][0][numero_anterior(mov_leg[1][numero+1][1],dado,mov_leg[1][numero+1][0])]) and not (lista[i][0][mov_leg[1][numero+1][1]][0] != mov_leg[1][numero+1][0]):
                                l_aux.append(valores[i])
                                i += 1
                            else:
                                while (tablero[numero_anterior(mov_leg[1][numero+1][1],dado,mov_leg[1][numero+1][0])] == lista[i][0][numero_anterior(mov_leg[1][numero+1][1],dado,mov_leg[1][numero+1][0])]) or (lista[i][0][mov_leg[1][numero+1][1]][0] != mov_leg[1][numero+1][0]):
                                    if (valores[i] == 1):
                                        jugadas.append(1)
                                        i += 1
                                        break
                                    if i == len(valores):
                                        lista_resultado = arreglar_errores(valores,lista,mov_leg)
                                        return lista_resultado
                                    l_aux.append(valores[i])
                                    i += 1
                            jugadas.append(l_aux)
                    numero = numero+1
            for i in range(len(jugadas)):
                if type(jugadas[i]) == list:
                    if (1 in jugadas[i]):
                        if jugadas[i][len(jugadas[i])-1] == 1:
                            if i != 0:
                                if type(jugadas[i-1]) == list:
                                    jugadas = modificar_jugadas(jugadas, i)
                                    break
                        else:
                            jugadas = []
                            l_aux1 = []
                            for j in valores:
                                if j == 1:
                                    if l_aux1 !=[]:
                                        jugadas.append(l_aux1)
                                        l_aux1 =[]
                                    jugadas.append(1)
                                else:
                                    l_aux1.append(j)       
    if mov_leg[0] != 0:
        prob = 1/mov_leg[0]       

    if probabilidades == []:
        if analizar_jugadas(jugadas):
            probabilidades = calcular_prob(jugadas, prob) 
            for i in range(len(probabilidades)):
                probabilidades[i] = (1/6)*probabilidades[i]
        else:
            lista_resultado = (valores,lista,mov_leg)
    l = []
    for i in range(len(lista)):
        a = (lista[i][0],probabilidades[i])
        l.append(a)
    return l

 
# Dada una ficha avanza con esta ficha modificando el tablero al avanzarla y 
# devuelve los hijos que se froman al realizar dicho movimiento.
def avan_cambiando_tablero(tablero,ficha,pos,dado,turno,hijos,probabilidad):
    if legal(tablero,ficha,pos,dado):
        nueva_posicion = avanzar(tablero,ficha,pos,dado)
        if tablero[nueva_posicion][0] == 0 and nueva_posicion not in ['Am8','Az8','R8','V8']:
            tablero_aux = copia_tablero(tablero)
            tablero_aux[nueva_posicion][0] = ficha
            if tablero_aux[pos][1] == ficha:
                tablero_aux[pos][1] = 0
            else:
                if tablero_aux[pos][1] == 0: 
                    tablero_aux[pos][0] = 0
                else:
                    tablero_aux[pos][0] = tablero_aux[pos][1]
                    tablero_aux[pos][1] = 0
            hijo = (tablero_aux,probabilidad)
            hijos.append(hijo)
        else:
            if turno == 1:
                if nueva_posicion == 'Am8' or nueva_posicion == 'R8':
                    tablero_aux = copia_tablero(tablero)
                    j = 0
                    while tablero_aux[nueva_posicion][j] != 0:
                        j += 1
                    tablero_aux[nueva_posicion][j] = ficha
                    if tablero_aux[pos][1] != 0 and tablero_aux[pos][1] == ficha:
                        tablero_aux[pos][1] = 0
                    elif tablero_aux[pos][1] != 0:
                        tablero_aux[pos][0] = tablero_aux[pos][1]
                        tablero_aux[pos][1] = 0
                    else:
                        tablero_aux[pos][0] = 0
                    probabilidad = probabilidad+1
                    hijos1 = meter_ficha(tablero_aux,turno,[],probabilidad)
                    if len(hijos1) == 1:
                        hijos.append((hijos1[0][0],probabilidad))
                    else:
                        for i in hijos1:
                            hijos.append(i)
                elif tablero[nueva_posicion][0] == 'Am' or tablero[nueva_posicion][0] == 'R' or (nueva_posicion in seguros):
                    tablero_aux = copia_tablero(tablero)
                    tablero_aux[nueva_posicion][1] = ficha
                    if tablero_aux[pos][1] != 0 and tablero_aux[pos][1] == ficha:
                        tablero_aux[pos][1] = 0
                    elif tablero_aux[pos][1] != 0:
                        tablero_aux[pos][0] = tablero_aux[pos][1]
                        tablero_aux[pos][1] = 0
                    else:
                        tablero_aux[pos][0] = 0
                    hijo = (tablero_aux,probabilidad)
                    hijos.append(hijo)
                else:
                    tablero_aux = copia_tablero(tablero)
                    if tablero_aux[nueva_posicion][0] == 'Az':
                        tablero_aux['Az'] += 1
                    else:
                        tablero_aux['V'] += 1
                    tablero_aux[nueva_posicion][0] = ficha
                    if tablero_aux[pos][1] != 0 and tablero_aux[pos][1] == ficha:
                        tablero_aux[pos][1] = 0
                    elif tablero_aux[pos][1] != 0:
                        tablero_aux[pos][0] = tablero_aux[pos][1]
                        tablero_aux[pos][1] = 0
                    else:
                        tablero_aux[pos][0] = 0
                    probabilidad = probabilidad+1
                    hijos1 = comer(tablero_aux,turno,[],probabilidad)
                    if len(hijos1) == 1:
                        hijos.append((hijos1[0][0],probabilidad))
                    else:    
                        for i in hijos1:
                            hijos.append(i)
                    return hijos
            else:
                if nueva_posicion == 'Az8' or nueva_posicion == 'V8':
                    tablero_aux = copia_tablero(tablero)
                    j = 0
                    while tablero_aux[nueva_posicion][j] != 0:
                        j += 1
                    tablero_aux[nueva_posicion][j] = ficha
                    if tablero_aux[pos][1] != 0 and tablero_aux[pos][1] == ficha:
                        tablero_aux[pos][1] = 0
                    elif tablero_aux[pos][1] != 0:
                        tablero_aux[pos][0] = tablero_aux[pos][1]
                        tablero_aux[pos][1] = 0
                    else:
                        tablero_aux[pos][0] = 0
                    probabilidad = probabilidad+1
                    hijos1 = meter_ficha(tablero_aux,turno,[],probabilidad)
                    if len(hijos1) == 1:
                        hijos.append((hijos1[0][0],probabilidad))
                    else:    
                        for i in hijos1:
                            hijos.append(i)
                
                elif tablero[nueva_posicion][0] == 'Az' or tablero[nueva_posicion][0] == 'V' or (nueva_posicion in seguros):
                    tablero_aux = copia_tablero(tablero)
                    tablero_aux[nueva_posicion][1] = ficha
                    if tablero_aux[pos][1] != 0 and tablero_aux[pos][1] == ficha:
                        tablero_aux[pos][1] = 0
                    elif tablero_aux[pos][1] != 0:
                        tablero_aux[pos][0] = tablero_aux[pos][1]
                        tablero_aux[pos][1] = 0
                    else:
                        tablero_aux[pos][0] = 0
                    hijo = (tablero_aux,probabilidad)
                    hijos.append(hijo)               
                else:  
                    tablero_aux = copia_tablero(tablero)
                    if tablero_aux[nueva_posicion][0] == 'Am':
                        tablero_aux['Am'] += 1
                    else:
                        tablero_aux['R'] += 1
                    tablero_aux[nueva_posicion][0] = ficha
                    if tablero_aux[pos][1] != 0 and tablero_aux[pos][1] == ficha:
                        tablero_aux[pos][1] = 0
                    elif tablero_aux[pos][1] != 0:
                        tablero_aux[pos][0] = tablero_aux[pos][1]
                        tablero_aux[pos][1] = 0
                    else:
                        tablero_aux[pos][0] = 0
                    probabilidad = probabilidad+1
                    hijos1 = comer(tablero_aux,turno,[],probabilidad)
                    if len(hijos1) == 1:
                        hijos.append((hijos1[0][0],probabilidad))
                    else:
                        for i in hijos1:
                            hijos.append(i)
                    return hijos
    return hijos
            
    
                    
        
def meter_ficha(tablero,turno,hijos1,probabilidad):
    l = hijos(tablero,10,turno,probabilidad)
    if type(l[0]) == list:
        hijos1 = hijos1 + l[0]
    else:
        hijos1 = hijos1 + [l]
    return hijos1

def comer(tablero,turno,hijos1,probabilidad):
    l = hijos(tablero,20,turno,probabilidad)
    if type(l[0]) == list:
        hijos1 = hijos1 + l[0]
    else:
        hijos1 = hijos1 + [l]
    return hijos1

def sacar5casa(tablero,ficha):
    comido = 0
    if ficha == 'Am':
        if tablero[5] == [0,0]:
            tablero[5] = ['Am',0]
            tablero['Am'] = tablero['Am']-1
        elif tablero[5][1] == 0:
            tablero[5][1] = 'Am'
            tablero['Am'] = tablero['Am']-1
        else:
            if (tablero[5][0]=='Am' or tablero[5][0]=='R') and (tablero[5][1]=='Am' or tablero[5][1]=='R'):
                pass
            else:
                if tablero[5][1] == 'Az' or tablero[5][1] == 'V':
                    if tablero[5][1] == 'Az':
                        tablero['Az'] = tablero['Az'] + 1
                    else:
                        tablero['V'] = tablero['V'] + 1
                    tablero[5][1] = 'Am'
                    tablero['Am'] = tablero['Am']-1
                    comido = 1
                else:
                    if tablero[5][0] == 'Az':
                        tablero['Az'] = tablero['Az'] + 1
                    else:
                        tablero['V'] = tablero['V'] + 1
                    tablero[5][0] = 'Am'
                    tablero['Am'] = tablero['Am']-1
                    comido = 1
    elif ficha == 'R':
        if tablero[39] == [0,0]:
            tablero[39] = ['R',0]
            tablero['R'] = tablero['R']-1
        elif tablero[39][1] == 0:
            tablero[39][1] = 'R'
            tablero['R'] = tablero['R']-1
        else:
            if (tablero[39][0]=='Am' or tablero[39][0]=='R') and (tablero[39][1]=='Am' or tablero[39][1]=='R'):
                pass
            else:
                if tablero[39][1] == 'Az' or tablero[39][1] == 'V':
                    if tablero[39][1] == 'Az':
                        tablero['Az'] = tablero['Az'] + 1
                    else:
                        tablero['V'] = tablero['V'] + 1
                    tablero[39][1] = 'R'
                    tablero['R'] = tablero['R']-1
                    comido = 1
                else:
                    if tablero[39][0] == 'Az':
                        tablero['Az'] = tablero['Az'] + 1
                    else:
                        tablero['V'] = tablero['V'] + 1
                    tablero[39][0] = 'R'
                    tablero['R'] = tablero['R']-1
                    comido = 1
    elif ficha == 'Az':
        if tablero[22] == [0,0]:
            tablero[22] = ['Az',0]
            tablero['Az'] = tablero['Az']-1
        elif tablero[22][1] == 0:
            tablero[22][1] = 'Az'
            tablero['Az'] = tablero['Az']-1
        else:
            if (tablero[22][0]=='Az' or tablero[22][0]=='V') and (tablero[22][1]=='Az' or tablero[22][1]=='V'):
                pass
            else:
                if tablero[22][1] == 'Am' or tablero[22][1] == 'R':
                    if tablero[22][1] == 'Am':
                        tablero['Am'] = tablero['Am'] + 1
                    else:
                        tablero['R'] = tablero['R'] + 1
                    tablero[22][1] = 'Az'
                    tablero['Az'] = tablero['Az']-1
                    comido = 1
                else:
                    if tablero[22][0] == 'Am':
                        tablero['Am'] = tablero['Am'] + 1
                    else:
                        tablero['R'] = tablero['R'] + 1
                    tablero[22][0] = 'Az'
                    tablero['Az'] = tablero['Az']-1
                    comido = 1
    else:
        if tablero[56] == [0,0]:
            tablero[56] = ['V',0]
            tablero['V'] = tablero['V']-1
        elif tablero[56][1] == 0:
            tablero[56][1] = 'V'
            tablero['V'] = tablero['V']-1
        else:
            if (tablero[56][0]=='Az' or tablero[56][0]=='V') and (tablero[56][1]=='Az' or tablero[56][1]=='V'):
                pass
            else:
                if tablero[56][1] == 'Am' or tablero[56][1] == 'R':
                    if tablero[56][1] == 'Am':
                        tablero['Am'] = tablero['Am'] + 1
                    else:
                        tablero['R'] = tablero['R'] + 1
                    tablero[56][1] = 'V'
                    tablero['V'] = tablero['V']-1
                    comido = 1
                else:
                    if tablero[56][0] == 'Am':
                        tablero['Am'] = tablero['Am'] + 1
                    else:
                        tablero['R'] = tablero['R'] + 1
                    tablero[56][0] = 'V'
                    tablero['V'] = tablero['V']-1
                    comido = 1
    return tablero,comido


def posiciones_fichas(tablero,turno):
    posiciones = []
    if turno == 1:
        for i in tablero:
            if i == 'Am' or i == 'Az' or i == 'R' or i == 'V' or i == 'Am8' or i == 'Az8' or i == 'R8' or i == 'V8':
                pass
            else:
                for j in tablero[i]:
                    if j == 'Am':
                        posiciones.append(('Am',i))
                    elif j == 'R':
                        posiciones.append(('R',i))
    else:
        for i in tablero:
            if i == 'Am' or i == 'Az' or i == 'R' or i == 'V' or i == 'Am8' or i == 'Az8' or i == 'R8' or i == 'V8':
                pass
            else:
                for j in tablero[i]:
                    if j == 'Az':
                        posiciones.append(('Az',i))
                    elif j == 'V':
                        posiciones.append(('V',i))
    return posiciones
                           

# Devuelve los hijos de una tirada de dado concreta para un jugador y su probabilidad.
def hijos(tablero,dado,turno,probabilidad):
    posiciones = []
    barreras = []
    hijos = []
    if turno == 1:
        for i in tablero:
            barrera = 0
            if i == 'Am' or i == 'Az' or i == 'R' or i == 'V' or i == 'Am8' or i == 'Az8' or i == 'R8' or i == 'V8':
                pass
            else:
                for j in tablero[i]:
                    if j == 'Am':
                        posiciones.append(('Am',i))
                        barrera += 1
                        if barrera == 2 and len(posiciones) != len(set(posiciones)):
                            if type(i) == str:
                                posiciones.pop(len(posiciones)-1)
                            else:
                                barreras.append(('Am',i))
                                posiciones.pop(len(posiciones)-1)
                    elif j == 'R':
                        posiciones.append(('R',i))
                        barrera += 1
                        if barrera == 2 and len(posiciones) != len(set(posiciones)):
                            if type(i) == str:
                                posiciones.pop(len(posiciones)-1)
                            else:
                                barreras.append(('R',i))
                                posiciones.pop(len(posiciones)-1)
        if dado == 6:
            if tablero['Am'] == 0 and tablero['R'] == 0:
                dado = 7
            if barreras != []:
                hijos_aux = hijos.copy()
                for h in barreras:
                    hijos = avan_cambiando_tablero(tablero,h[0],h[1],dado,turno,hijos,probabilidad)
                if hijos_aux == hijos:
                    for j in posiciones:
                        hijos = avan_cambiando_tablero(tablero,j[0],j[1],dado,turno,hijos,probabilidad)
            else:
                for j in posiciones:
                    hijos = avan_cambiando_tablero(tablero,j[0],j[1],dado,turno,hijos,probabilidad)   
        elif dado == 5:
            hijos_aux = hijos.copy()
            tablero_aux =copia_tablero(tablero)
            if tablero['Am'] == 0 and tablero['R'] == 0:
                for j in posiciones:
                    hijos = avan_cambiando_tablero(tablero_aux,j[0],j[1],dado,turno,hijos,probabilidad)
            elif tablero['Am'] != 0 and tablero['R'] != 0:
                if ((tablero[5][0]=='Am' or tablero[5][0]=='R') and (tablero[5][1]=='Am' or tablero[5][1]=='R')) and ((tablero[39][0]=='Am' or tablero[39][0]=='R') and (tablero[39][1]=='Am' or tablero[39][1]=='R')):
                    for j in posiciones:
                        hijos = avan_cambiando_tablero(tablero_aux,j[0],j[1],dado,turno,hijos,probabilidad)
                elif (tablero[39][0]=='Am' or tablero[39][0]=='R') and (tablero[39][1]=='Am' or tablero[39][1]=='R'):
                    tablero_aux1 = sacar5casa(tablero_aux,'Am')
                    if tablero_aux1[1] == 1:
                        probabilidad = probabilidad+1
                        hijos1 = comer(tablero_aux1[0],turno,[],probabilidad)
                        for i in hijos1:
                            hijos.append(i)
                    else:
                        hijo = (tablero_aux1[0],probabilidad)
                        hijos = hijos + [hijo]
                elif (tablero[5][0]=='Am' or tablero[5][0]=='R') and (tablero[5][1]=='Am' or tablero[5][1]=='R'):
                    tablero_aux2 = sacar5casa(tablero_aux,'R')
                    if tablero_aux2[1] == 1:
                        probabilidad = probabilidad+1
                        hijos1 = comer(tablero_aux2[0],turno,[],probabilidad)
                        for i in hijos1:
                            hijos.append(i)
                    else:
                        hijo = (tablero_aux2[0],probabilidad)
                        hijos = hijos + [hijo]
                else:
                    tablero_aux1 = sacar5casa(tablero_aux,'Am')
                    tablero_aux = copia_tablero(tablero)
                    tablero_aux2 = sacar5casa(tablero_aux,'R')
                    if tablero_aux1[1] == 1 and tablero_aux2[1] == 1:
                        probabilidad = probabilidad+1
                        hijos1 = comer(tablero_aux1[0],turno,[],probabilidad)
                        for i in hijos1:
                            hijos.append(i)
                        hijos1 = comer(tablero_aux2[0],turno,[],probabilidad)
                        for i in hijos1:
                            hijos.append(i)
                    elif tablero_aux1[1] == 1:
                        probabilidad = probabilidad+1
                        hijos1 = comer(tablero_aux1[0],turno,[],probabilidad)
                        for i in hijos1:
                            hijos.append(i)
                        hijo = (tablero_aux2[0],probabilidad-1)
                        hijos = hijos + [hijo]
                    elif tablero_aux2[1] == 1:
                        hijo = (tablero_aux1[0],probabilidad)
                        hijos = hijos + [hijo]
                        probabilidad = probabilidad+1
                        hijos1 = comer(tablero_aux2[0],turno,[],probabilidad)
                        for i in hijos1:
                            hijos.append(i)
                    else:
                        hijo1 = (tablero_aux1[0],probabilidad)
                        hijo2 = (tablero_aux2[0],probabilidad)
                        l = [hijo1,hijo2]
                        hijos = hijos + l
            elif tablero['Am'] != 0:
                if (tablero[5][0]=='Am' or tablero[5][0]=='R') and (tablero[5][1]=='Am' or tablero[5][1]=='R'):
                    for j in posiciones:
                        hijos = avan_cambiando_tablero(tablero_aux,j[0],j[1],dado,turno,hijos,probabilidad)
                else:
                    tablero_aux1 = sacar5casa(tablero_aux,'Am')
                    if tablero_aux1[1] == 1:
                        probabilidad = probabilidad+1
                        hijos1 = comer(tablero_aux1[0],turno,[],probabilidad)
                        for i in hijos1:
                            hijos.append(i)
                    else:
                        hijo = (tablero_aux1[0],probabilidad)
                        hijos = hijos + [hijo]
            else:
                if (tablero[39][0]=='Am' or tablero[39][0]=='R') and (tablero[39][1]=='Am' or tablero[39][1]=='R'):
                    for j in posiciones:
                        hijos = avan_cambiando_tablero(tablero_aux,j[0],j[1],dado,turno,hijos,probabilidad)
                else:
                    tablero_aux1 = sacar5casa(tablero_aux,'R')
                    if tablero_aux1[1] == 1:
                        probabilidad = probabilidad+1
                        hijos1 = comer(tablero_aux1[0],turno,[],probabilidad)
                        for i in hijos1:
                            hijos.append(i)
                    else:
                        hijo = (tablero_aux1[0],probabilidad)
                        hijos = hijos + [hijo]
            if hijos_aux == hijos:
                for j in posiciones:
                    hijos = avan_cambiando_tablero(tablero_aux,j[0],j[1],dado,turno,hijos,probabilidad)
        else:
            for j in posiciones:
                hijos = avan_cambiando_tablero(tablero,j[0],j[1],dado,turno,hijos,probabilidad)
        if hijos == []:  
            hijo = (tablero,1)
            hijos.append(hijo)
    if turno == 2:
        for i in tablero:
            barrera = 0
            if i == 'Am' or i == 'Az' or i == 'R' or i == 'V' or i == 'Am8' or i == 'Az8' or i == 'R8' or i == 'V8':
                pass
            else:
                for j in tablero[i]:
                    if j == 'Az':
                        posiciones.append(('Az',i))
                        barrera += 1
                        if barrera == 2 and len(posiciones) != len(set(posiciones)):
                            if type(i) == str:
                                posiciones.pop(len(posiciones)-1)
                            else:
                                barreras.append(('Az',i))
                                posiciones.pop(len(posiciones)-1)
                    elif j == 'V':
                        posiciones.append(('V',i))
                        barrera += 1
                        if barrera == 2 and len(posiciones) != len(set(posiciones)):
                            if type(i) == str:
                                posiciones.pop(len(posiciones)-1)
                            else:
                                barreras.append(('V',i))
                                posiciones.pop(len(posiciones)-1)
            
        if dado == 6:
            if tablero['Az'] == 0 and tablero['V'] == 0:
                dado = 7
            if barreras != []:
                hijos_aux = hijos.copy()
                for h in barreras:
                    hijos = avan_cambiando_tablero(tablero,h[0],h[1],dado,turno,hijos,probabilidad)
                if hijos_aux == hijos:
                    for j in posiciones:
                        hijos = avan_cambiando_tablero(tablero,j[0],j[1],dado,turno,hijos,probabilidad)
            else:
                for j in posiciones:
                    hijos = avan_cambiando_tablero(tablero,j[0],j[1],dado,turno,hijos,probabilidad)  
        elif dado == 5:
            hijos_aux = hijos.copy()
            tablero_aux = copia_tablero(tablero)
            if tablero['Az'] == 0 and tablero['V'] == 0:
                for j in posiciones:
                    hijos = avan_cambiando_tablero(tablero_aux,j[0],j[1],dado,turno,hijos,probabilidad)
                    
            elif tablero['Az'] != 0 and tablero['V'] != 0:
                if ((tablero[22][0]=='Az' or tablero[22][0]=='V') and (tablero[22][1]=='Az' or tablero[22][1]=='V')) and ((tablero[56][0]=='Az' or tablero[56][0]=='V') and (tablero[56][1]=='Az' or tablero[56][1]=='V')):
                    for j in posiciones:
                        hijos = avan_cambiando_tablero(tablero_aux,j[0],j[1],dado,turno,hijos,probabilidad)
                elif (tablero[56][0]=='Az' or tablero[56][0]=='V') and (tablero[56][1]=='Az' or tablero[56][1]=='V'):
                    tablero_aux1 = sacar5casa(tablero_aux,'Az')
                    if tablero_aux1[1] == 1:
                        probabilidad = probabilidad+1
                        hijos1 = comer(tablero_aux1[0],turno,[],probabilidad)
                        for i in hijos1:
                            hijos.append(i)
                    else:
                        hijo = (tablero_aux1[0],probabilidad)
                        hijos = hijos + [hijo]
                elif (tablero[22][0]=='Az' or tablero[22][0]=='V') and (tablero[22][1]=='Az' or tablero[22][1]=='V'):
                    tablero_aux2 = sacar5casa(tablero_aux,'V')
                    if tablero_aux2[1] == 1:
                       probabilidad = probabilidad+1
                       hijos1 = comer(tablero_aux2[0],turno,[],probabilidad)
                       for i in hijos1:
                           hijos.append(i)
                    else:
                       hijo = (tablero_aux2[0],probabilidad)
                       hijos = hijos + [hijo]
                else:
                    tablero_aux1 = sacar5casa(tablero_aux,'Az')
                    tablero_aux = copia_tablero(tablero)
                    tablero_aux2 = sacar5casa(tablero_aux,'V')
                    if tablero_aux1[1] == 1 and tablero_aux2[1] == 1:
                        probabilidad = probabilidad+1
                        hijos1 = comer(tablero_aux1[0],turno,[],probabilidad)
                        for i in hijos1:
                            hijos.append(i)
                        hijos1 = comer(tablero_aux2[0],turno,[],probabilidad)
                        for i in hijos1:
                            hijos.append(i)
                    elif tablero_aux1[1] == 1:
                        probabilidad = probabilidad+1
                        hijos1 = comer(tablero_aux1[0],turno,[],probabilidad)
                        for i in hijos1:
                            hijos.append(i)
                        hijo = (tablero_aux2[0],probabilidad-1)
                        hijos = hijos + [hijo]
                    elif tablero_aux2[1] == 1:
                        hijo = (tablero_aux1[0],probabilidad)
                        hijos = hijos + [hijo]
                        probabilidad = probabilidad+1
                        hijos1 = comer(tablero_aux2[0],turno,[],probabilidad)
                        for i in hijos1:
                            hijos.append(i)
                    else:
                        hijo1 = (tablero_aux1[0],probabilidad)
                        hijo2 = (tablero_aux2[0],probabilidad)
                        l = [hijo1,hijo2]
                        hijos = hijos + l
            elif tablero['Az'] != 0:
                if (tablero[22][0]=='Az' or tablero[22][0]=='V') and (tablero[22][1]=='Az' or tablero[22][1]=='V'):
                    for j in posiciones:
                        hijos = avan_cambiando_tablero(tablero_aux,j[0],j[1],dado,turno,hijos,probabilidad)
                else:
                    tablero_aux1 = sacar5casa(tablero_aux,'Az')
                    if tablero_aux1[1] == 1:
                        probabilidad = probabilidad+1
                        hijos1 = comer(tablero_aux1[0],turno,[],probabilidad)
                        for i in hijos1:
                            hijos.append(i)
                    else:
                        hijo = (tablero_aux1[0],probabilidad)
                        hijos = hijos + [hijo]
            else:
                if (tablero[56][0]=='Az' or tablero[56][0]=='V') and (tablero[56][1]=='Az' or tablero[56][1]=='V'):
                    for j in posiciones:
                        hijos = avan_cambiando_tablero(tablero_aux,j[0],j[1],dado,turno,hijos,probabilidad)
                else:
                    tablero_aux1 = sacar5casa(tablero_aux,'V')
                    if tablero_aux1[1] == 1:
                        probabilidad = probabilidad+1
                        hijos1 = comer(tablero_aux1[0],turno,[],probabilidad)
                        for i in hijos1:
                            hijos.append(i)
                    else:
                        hijo = (tablero_aux1[0],probabilidad)
                        hijos = hijos + [hijo]
            if hijos_aux == hijos:
                for j in posiciones:
                    hijos = avan_cambiando_tablero(tablero_aux,j[0],j[1],dado,turno,hijos,probabilidad)
        else:
            for j in posiciones:
                hijos = avan_cambiando_tablero(tablero,j[0],j[1],dado,turno,hijos,probabilidad)
        if hijos == []:   
            hijo = (tablero,1)
            hijos.append(hijo)
    return hijos,probabilidad

def ficha_mover_6(tablero,turno):
    posiciones = [] 
    barrera = barreras(tablero,turno)
    if barrera[0] == 0:
        pos_fichas = posiciones_fichas(tablero, turno)
        for i in pos_fichas:
            if legal(tablero, i[0], i[1], 6):
                posiciones.append(i)
    else:
        for i in barrera[1]:
            if legal(tablero, tablero[i][0], i, 6):
                posiciones.append((tablero[i][0],i))
        if posiciones == []:
            pos_fichas = posiciones_fichas(tablero, turno)
            for i in pos_fichas:
                if legal(tablero, i[0], i[1], 6):
                    posiciones.append(i)
    return posiciones
                        
                
def lista_todos1(lista):
    for i in lista:
        if i != 1:
            return False  
    return True           
    

def todos_hijos(tablero,turno):
    hijos1 = []
    for i in range(1,6):
        hijos1.append(hijos(tablero,i,turno,1)[0])
        hijos1[i-1] = aux_probabilidades(hijos1[i-1],tablero,i,turno)
    hijos2 =  [elemento for sublista in hijos1 for elemento in sublista]
    hijos_6 = hijos(tablero,6,turno,1)[0]
    lista_hijos = aux_probabilidades(hijos_6,tablero,6,turno)
    hijos1 =[]
    hijos7 = []
    for i in lista_hijos:
        hijos1 =[]
        for j in range(1,6):
            hijos1.append(hijos(i[0],j,turno,1)[0])
            hijos1[j-1] = aux_probabilidades(hijos1[j-1],i[0],j,turno)
            hijos_aux1 = []
            for k in hijos1[j-1]:
                probabilidad_aux = k[1]
                probabilidad_aux = probabilidad_aux*i[1]
                hijos_aux1.append((k[0],probabilidad_aux))
            hijos1[j-1] = hijos_aux1
            hijos7 = hijos7 +hijos1[j-1]
    
    hijos_doble6 = []
    for i in lista_hijos:
        a = hijos(i[0],6,turno,1)[0]
        hijos_doble6_1 = aux_probabilidades(a,i[0],6,turno)
        hijos_aux1 = []
        for k in hijos_doble6_1:
            probabilidad_aux = k[1]
            probabilidad_aux = probabilidad_aux*i[1]
            hijos_aux1.append((k[0],probabilidad_aux))
        hijos_doble6 = hijos_doble6 + hijos_aux1
    hijos8 = []
    for i in hijos_doble6:
        hijos1 =[]
        for j in range(1,6):
            hijos1.append(hijos(i[0],j,turno,1)[0])
            hijos1[j-1] = aux_probabilidades(hijos1[j-1],i[0],j,turno)
            hijos_aux1 = []
            for k in hijos1[j-1]:
                probabilidad_aux = k[1]
                probabilidad_aux = probabilidad_aux*i[1]
                hijos_aux1.append((k[0],probabilidad_aux))
            hijos1[j-1] = hijos_aux1
            hijos8 = hijos8 +hijos1[j-1]
    hijos5 = []
    for i in lista_hijos:
        posiciones = ficha_mover_6(i[0],turno)
        for j in posiciones:
            tableros_posibles_aux = avan_cambiando_tablero(i[0], j[0], j[1], 6, turno, [], 1)
            
            tableros_posibles= []
            valores = []
            for t in range(len(tableros_posibles_aux)):
                valores.append(tableros_posibles_aux[t][1])
            if lista_todos1(valores):
                tableros_posibles = aux_probabilidades(tableros_posibles_aux, i[0], 6, turno)
            else:
                probabilidades = aux_calcular_prob(valores, 1/6, [])
                for t in range(len(tableros_posibles_aux)):
                    a = (tableros_posibles_aux[t][0],probabilidades[t])
                    tableros_posibles.append(a)
            
            
            posicion_nueva = avanzar(i[0], j[0], j[1], 6)
            if posicion_nueva == 'Am8' or posicion_nueva == 'R8' or posicion_nueva == 'Az8' or posicion_nueva == 'V8':
                for k in tableros_posibles:
                    hijos5.append(k)
            posicion_nueva = avanzar(i[0], j[0], j[1], 6)
            if turno == 1 and ((i[0][posicion_nueva][0] != 'Az' and i[0][posicion_nueva][0] != 'V') or (posicion_nueva in seguros)):
                    if posicion_nueva in seguros:
                        if i[0][posicion_nueva][0] != 0:
                            for k in tableros_posibles:
                                tablero_aux = k[0]
                                tablero_aux[posicion_nueva][1] =0
                                tablero_aux[j[0]] = tablero_aux[j[0]] +1
                                probabilidad_aux = k[1]
                                probabilidad_aux = (probabilidad_aux)*(1/6)*i[1]
                                hijos5.append((tablero_aux,probabilidad_aux))
                        else:
                            for k in tableros_posibles:
                                tablero_aux = k[0]
                                tablero_aux[posicion_nueva][0] =0
                                tablero_aux[j[0]] = tablero_aux[j[0]] +1
                                probabilidad_aux = k[1]
                                probabilidad_aux = (probabilidad_aux)*(1/6)*i[1]
                                hijos5.append((tablero_aux,probabilidad_aux))
                    elif i[0][posicion_nueva][0] == 'Am' or i[0][posicion_nueva][0] == 'R':
                        for k in tableros_posibles:
                            tablero_aux = k[0]
                            tablero_aux[posicion_nueva][1] =0
                            tablero_aux[j[0]] = tablero_aux[j[0]] +1
                            probabilidad_aux = k[1]
                            probabilidad_aux = (probabilidad_aux)*(1/6)*i[1]
                            hijos5.append((tablero_aux,probabilidad_aux))
                    else:
                        for k in tableros_posibles:
                            tablero_aux = k[0]
                            tablero_aux[posicion_nueva][0] =0
                            tablero_aux[j[0]] = tablero_aux[j[0]] +1
                            probabilidad_aux = k[1]
                            probabilidad_aux = (probabilidad_aux)*(1/6)*i[1]                        
                            hijos5.append((tablero_aux,probabilidad_aux))
            elif turno == 2 and ((i[0][posicion_nueva][0] != 'Am' and i[0][posicion_nueva][0] != 'R') or (posicion_nueva in seguros)):
                if posicion_nueva in seguros:
                        if i[0][posicion_nueva][0] != 0:
                            for k in tableros_posibles:
                                tablero_aux = k[0]
                                tablero_aux[posicion_nueva][1] =0
                                tablero_aux[j[0]] = tablero_aux[j[0]] +1
                                probabilidad_aux = k[1]
                                probabilidad_aux = (probabilidad_aux)*(1/6)*i[1]
                                hijos5.append((tablero_aux,probabilidad_aux))
                        else:
                            for k in tableros_posibles:
                                tablero_aux = k[0]
                                tablero_aux[posicion_nueva][0] =0
                                tablero_aux[j[0]] = tablero_aux[j[0]] +1
                                probabilidad_aux = k[1]
                                probabilidad_aux = (probabilidad_aux)*(1/6)*i[1]
                                hijos5.append((tablero_aux,probabilidad_aux))   
                elif i[0][posicion_nueva][0] == 'Az' or i[0][posicion_nueva][0] == 'V':
                        for k in tableros_posibles:
                            tablero_aux = k[0]
                            tablero_aux[posicion_nueva][1] =0
                            tablero_aux[j[0]] = tablero_aux[j[0]] +1
                            probabilidad_aux = k[1]
                            probabilidad_aux = (probabilidad_aux)*(1/6)*i[1]
                            hijos5.append((tablero_aux,probabilidad_aux))
                else:
                    for k in tableros_posibles:
                        tablero_aux = k[0]
                        tablero_aux[posicion_nueva][0] =0
                        tablero_aux[j[0]] = tablero_aux[j[0]] +1
                        probabilidad_aux = k[1]
                        probabilidad_aux = (probabilidad_aux)*(1/6)*i[1]
                        hijos5.append((tablero_aux,probabilidad_aux))
            else:
                for k in tableros_posibles:
                    if k[0][posicion_nueva][0] == j[0]:
                        tablero_aux = k[0]
                        tablero_aux[posicion_nueva][0] =0
                        tablero_aux[j[0]] = tablero_aux[j[0]] +1
                        probabilidad_aux = k[1]
                        probabilidad_aux = (probabilidad_aux)*(1/6)*i[1]
                        hijos5.append((tablero_aux,probabilidad_aux))
    hijos_finales = hijos2 + hijos7 + hijos8 + hijos5     
    return hijos_finales

def todos_hijos_modificado(tablero,turno):
    hijos1 = []
    for i in range(1,6):
        hijos1.append(hijos(tablero,i,turno,1)[0])
        hijos1[i-1] = aux_probabilidades(hijos1[i-1],tablero,i,turno)
    hijos2 =  [elemento for sublista in hijos1 for elemento in sublista]
    hijos_6 = hijos(tablero,6,turno,1)[0]
    lista_hijos = aux_probabilidades(hijos_6,tablero,6,turno)
    hijos1 =[]
    hijos7 = []
    for i in lista_hijos:
        hijos1 =[]
        for j in range(1,6):
            hijos1.append(hijos(i[0],j,turno,1)[0])
            hijos1[j-1] = aux_probabilidades(hijos1[j-1],i[0],j,turno)
            hijos_aux1 = []
            for k in hijos1[j-1]:
                probabilidad_aux = k[1]
                probabilidad_aux = probabilidad_aux*i[1]
                hijos_aux1.append((k[0],probabilidad_aux))
            hijos1[j-1] = hijos_aux1
            hijos7 = hijos7 +hijos1[j-1]
    hijos_finales = hijos2 + hijos7
    return hijos_finales

tirada =[1,2,3,4,5,6]
def tablero_aleatorio(tablero,numero_movimientos,turno):
    if turno == 1:
        contrario = 2
    else:
        contrario = 1
    if numero_movimientos == 0:
        return tablero
    l = todos_hijos(tablero,turno)
    l1 = []
    for i in l:
        l1.append(i[0])
    tab_aleatorio = random.choice(l1)
    resultado = tablero_aleatorio(tab_aleatorio,numero_movimientos-1,contrario)  
    return resultado


'''
tableros_aleatorios = []
while len(tableros_aleatorios) < 20:
    num_movimientos = random.randint(8,30)
    jugador = random.choice([1,2])
    tablero = tablero_aleatorio(tablero_inicial,num_movimientos,1)
    if tablero not in tableros_aleatorios:
        tableros_aleatorios.append(tablero)
        print(len(tableros_aleatorios))
'''

# La heuristica viene dada por la suma de la distancia de las fichas de un 
# jugador al final.
def terminal(tablero):
    if (tablero['Am8'] == ['Am','Am','Am','Am'] and tablero['R8'] == ['R','R','R','R']):
        return True
    elif (tablero['Az8'] == ['Az','Az','Az','Az'] and tablero['V8'] == ['V','V','V','V']):
        return True
    return False

def numero_casillas_faltan(tablero,jugador):
    casillas = 0
    if jugador == 1:
        for i in tablero:
            if type(tablero[i]) == int:
                if i == 'Am':
                    casillas = casillas +71*tablero['Am']
                elif i == 'R':
                    casillas = casillas +71*tablero['R']
            else:
                for j in tablero[i]:
                    if j == 'Am':
                        if type(i) == str:
                            casillas = casillas + 8 - int(i[2])
                        else:
                            casillas = casillas + 75 - i
                    elif j == 'R':
                        if type(i) == str:
                            casillas = casillas + 8 - int(i[1])
                        elif i <= 34:
                            casillas = casillas + 42 -i
                        else:
                            casillas = casillas  + 75 - (i-34)
    elif jugador == 2:
        for i in tablero:
            if type(tablero[i]) == int:
                if i == 'Az':
                    casillas = casillas +71*tablero['Az']
                elif i == 'V':
                    casillas = casillas +71*tablero['V']
            else:
                for j in tablero[i]:
                    if j == 'Az':
                        if type(i) == str:
                            casillas = casillas + 8 - int(i[2])
                        elif i <= 17:
                            casillas = casillas + 25 -i
                        else:
                            casillas = casillas  + 75 - (i-17)
                    elif j == 'V':
                        if type(i) == str:
                            casillas = casillas + 8 - int(i[1])
                        elif i <= 51:
                            casillas = casillas + 59 -i
                        else:
                            casillas = casillas  + 75 - (i-51)
    return casillas
                    
                    
def casillas_zona(tablero,jugador):
    contador = 0
    if jugador == 1:
        for i in ['Am1','Am2','Am3','Am4','Am5','Am6','Am7','Am8','R1','R2','R3','R4','R5','R6','R7','R8']:
            for j in tablero[i]:
                if j != 0:
                    contador +=1
    elif jugador == 2:
        for i in ['Az1','Az2','Az3','Az4','Az5','Az6','Az7','Az8','V1','V2','V3','V4','V5','V6','V7','V8']:
            for j in tablero[i]:
                if j != 0:
                    contador +=1
    return contador
                    

def heuristica(tablero):
    if (tablero['Am8'] == ['Am','Am','Am','Am'] and tablero['R8'] == ['R','R','R','R']):
        return float('inf')
    elif (tablero['Az8'] == ['Az','Az','Az','Az'] and tablero['V8'] == ['V','V','V','V']):
        return float('-inf')
    faltan1 = numero_casillas_faltan(tablero,1)
    faltan2 = numero_casillas_faltan(tablero,2)
    casillas_casa1 = tablero['Am'] + tablero['R']
    casillas_casa2 = tablero['Az'] + tablero['V']
    casillas_zona1 = casillas_zona(tablero,1)
    casillas_zona2 = casillas_zona(tablero,2)
    casillas_seguros1 = 0
    casillas_seguros2 = 0
    for i in seguros:
        if "Am" in tablero[i]:
            casillas_seguros1 += 1
        elif "R" in tablero[i]:
            casillas_seguros1 += 1
        elif "Az" in tablero[i]:
            casillas_seguros2 += 1
        elif "V" in tablero[i]:
            casillas_seguros2 += 1
    valor1 = faltan1 + 5*casillas_casa1 - 30*casillas_zona1 - 10*casillas_seguros1
    valor2 = faltan2 + 5*casillas_casa2 - 30*casillas_zona2 - 10*casillas_seguros2
    return valor2-valor1


def expectiminimax(tablero,profundidad,jugador):
    if profundidad == 0 or terminal(tablero):
        return heuristica(tablero),None
    else:
        if jugador == 1:
            mejor_valor = float('-inf')
            mejor_movimiento = None
            for hijo in todos_hijos(tablero,jugador):
                valor,_ = expectiminimax(hijo[0],profundidad-1,4)
                if valor >= mejor_valor:
                    mejor_valor = valor
                    mejor_movimiento = hijo[0]
            return mejor_valor, mejor_movimiento
        elif jugador == 2:
            mejor_valor = float('inf')
            mejor_movimiento = None
            for hijo in todos_hijos(tablero,jugador):
                valor,_ = expectiminimax(hijo[0],profundidad-1,3)
                if valor <= mejor_valor:
                    mejor_valor = valor
                    mejor_movimiento = hijo[0]
            return mejor_valor, mejor_movimiento
        elif jugador == 3:
            mejor_valor = 0
            for hijo in todos_hijos(tablero,1):
                valor,_ = expectiminimax(hijo[0],profundidad-1,1)
                probabilidad = hijo[1]
                mejor_valor = mejor_valor + probabilidad*valor
            return mejor_valor, tablero
        else:
            mejor_valor = 0
            for hijo in todos_hijos(tablero,2):
                valor,_ = expectiminimax(hijo[0],profundidad-1,2)
                probabilidad = hijo[1]
                mejor_valor = mejor_valor + probabilidad*valor
            return mejor_valor, tablero
        
def expectiminimax_modificado(tablero,profundidad,jugador):
    if profundidad == 0 or terminal(tablero):
        return heuristica(tablero),None
    else:
        if jugador == 1:
            mejor_valor = float('-inf')
            mejor_movimiento = None
            for hijo in todos_hijos_modificado(tablero,jugador):
                valor,_ = expectiminimax_modificado(hijo[0],profundidad-1,4)
                if valor >= mejor_valor:
                    mejor_valor = valor
                    mejor_movimiento = hijo[0]
            return mejor_valor, mejor_movimiento
        elif jugador == 2:
            mejor_valor = float('inf')
            mejor_movimiento = None
            for hijo in todos_hijos_modificado(tablero,jugador):
                valor,_ = expectiminimax_modificado(hijo[0],profundidad-1,3)
                if valor <= mejor_valor:
                    mejor_valor = valor
                    mejor_movimiento = hijo[0]
            return mejor_valor, mejor_movimiento
        elif jugador == 3:
            mejor_valor = 0
            for hijo in todos_hijos_modificado(tablero,1):
                valor,_ = expectiminimax_modificado(hijo[0],profundidad-1,1)
                probabilidad = hijo[1]
                mejor_valor = mejor_valor + probabilidad*valor
            return mejor_valor, tablero
        else:
            mejor_valor = 0
            for hijo in todos_hijos_modificado(tablero,2):
                valor,_ = expectiminimax_modificado(hijo[0],profundidad-1,2)
                probabilidad = hijo[1]
                mejor_valor = mejor_valor + probabilidad*valor
            return mejor_valor, tablero



'''
inicio = time.time()
resultado = jugar_partida(tablero_inicial,2,2)
fin = time.time()
duracion = fin-inicio
print(resultado)
print(duracion)
'''




iteraciones_normal = [(1,1),(1,2),(2,2)]
iteraciones_modificado = [(1,1),(1,2),(1,3),(2,3),(3,3)]
iteraciones_dif_tipos = [(1,1),(1,2),(1,3),(2,1),(2,2),(2,3)]



def crear_tablero(estado, padre=None):
    return {"estado": estado,"hijos": [],"estadisticas": {"visitas": 0, "ganancias": 0},"visitado": False,"padre": padre}
    
def copia_tablero1(tablero2):
    tablero1 = {}
    j=0
    for i in tablero2["estado"]:
        if i =="Am" or i =="R" or i == "Az" or i == "V":
          while j < 4:
              if tablero2["estado"][i] == j:
                  break
              j += 1
          tablero1[i] = j
          j = 0
        elif i =="Am8":
            tablero1[i] = [0,0,0,0]
            while tablero2["estado"][i][j] != 0:
                tablero1[i][j] = "Am"
                j += 1
                if  j == 4:
                    break
            j = 0
        elif i =="R8":
            tablero1[i] = [0,0,0,0]
            while tablero2["estado"][i][j] != 0:
                tablero1[i][j] = "R"
                j += 1
                if  j == 4:
                    break
            j = 0
        elif i == "Az8":
            tablero1[i] = [0,0,0,0]
            while tablero2["estado"][i][j] != 0:
                tablero1[i][j] = "Az"
                j += 1
                if  j == 4:
                    break
            j = 0
        elif i == "V8":
            tablero1[i] = [0,0,0,0]
            while tablero2["estado"][i][j] != 0:
                tablero1[i][j] = "V"
                j += 1
                if  j == 4:
                    break
            j = 0
        else:
            tablero1[i] = [0,0]
            for k in [0,1]:
                if tablero2["estado"][i][k] == "Am":
                    tablero1[i][k] = "Am"
                elif tablero2["estado"][i][k] == "R":
                    tablero1[i][k] = "R"
                elif tablero2["estado"][i][k] == "Az":
                    tablero1[i][k] = "Az"
                elif tablero2["estado"][i][k] == "V":
                    tablero1[i][k] = "V"
    tablero1 = crear_tablero(tablero1)
    return tablero1




# Devueleve True si no es bloqueado por una barrera o no llega a un seguro en el
# que ya hay dos fichas y False en caso contrario.
def legal1(tablero,ficha,pos,dado):
    if dado == 6:
        if ficha == 'Am' or ficha == 'R':
            if tablero["estado"]['Am'] == 0 and tablero["estado"]['R'] == 0:
                    dado = 7
        else:
            if tablero["estado"]['Az'] == 0 and tablero["estado"]['V'] == 0:
                    dado = 7   
    aux = ultimas_casillas(ficha,pos)
    if aux[0]:
        if aux[1]+dado > 8:
            return False
    if hay_barreras1(tablero,ficha,pos,dado):
        return False
    return True


  

#Devuelve True si hay barreras o si no se puede avanzar porque la casilla de 
#destino tiene ya dos fichas.
def hay_barreras1(tablero,ficha,pos,dado):
    if type(pos) == str:
        for i in range(1,dado+1):
            if ficha == 'Am' or ficha == 'Az':    
                numero = int(pos[2]) +i
            else:
                numero = int(pos[1]) +i
            if numero != 8:
                casilla = ficha + str(numero)
                if tablero["estado"][casilla][0] != 0 and tablero["estado"][casilla][0] == tablero["estado"][casilla][1]:
                    return True
    else:    
        if ficha == 'Am':
            if pos+dado <= 68:
                for i in range(1,dado+1):
                    casilla = pos+i
                    if tablero["estado"][casilla][0] != 0 and tablero["estado"][casilla][0] == tablero["estado"][casilla][1]:
                        return True
                if tablero["estado"][pos+dado][0] != 0 and tablero["estado"][pos+dado][1] != 0:
                    return True
            else:
                if pos+dado-68 > 8:
                    return True
                for i in range(pos+1,69):
                    casilla = i
                    if tablero["estado"][casilla][0] != 0 and tablero["estado"][casilla][0] == tablero["estado"][casilla][1]:
                        return True
                if pos+dado>68:
                    dado_nuevo = pos+dado-68
                    pos_nueva = 'Am0'
                    solucion = hay_barreras1(tablero,'Am',pos_nueva,dado_nuevo)
                    if solucion == True:
                        return True
        elif ficha == 'R':
            if pos+dado <= 34 or pos > 34:
                for i in range(1,dado+1):
                    casilla = pos+i
                    if casilla != 68:
                        casilla = casilla%68
                    if tablero["estado"][casilla][0] != 0 and tablero["estado"][casilla][0] == tablero["estado"][casilla][1]:
                        return True
                suma_dado = pos+dado
                if suma_dado != 68:
                    suma_dado = suma_dado%68
                if tablero["estado"][suma_dado][0] != 0 and tablero["estado"][suma_dado][1] != 0:
                    return True
            else:
                if pos+dado-34 > 8:
                    return True
                for i in range(pos+1,35):
                    casilla = i
                    if tablero["estado"][casilla][0] != 0 and tablero["estado"][casilla][0] == tablero["estado"][casilla][1]:
                        return True
                if pos+dado>34:
                    dado_nuevo = pos+dado-34
                    pos_nueva = 'R0'
                    solucion = hay_barreras1(tablero,'R',pos_nueva,dado_nuevo)
                    if solucion == True:
                        return True
        elif ficha == 'Az':
            if pos+dado <= 17 or pos > 17:
                for i in range(1,dado+1):
                    casilla = pos+i
                    if casilla != 68:
                        casilla = casilla%68
                    if tablero["estado"][casilla][0] != 0 and tablero["estado"][casilla][0] == tablero["estado"][casilla][1]:
                        return True
                suma_dado = pos+dado
                if suma_dado != 68:
                    suma_dado = suma_dado%68
                if tablero["estado"][suma_dado][0] != 0 and tablero["estado"][suma_dado][1] != 0:
                    return True
            else:
                if pos+dado-17 > 8:
                    return True
                for i in range(pos+1,18):
                    casilla = i
                    if tablero["estado"][casilla][0] != 0 and tablero["estado"][casilla][0] == tablero["estado"][casilla][1]:
                        return True
                if pos+dado>17:
                    dado_nuevo = pos+dado-17
                    pos_nueva = 'Az0'
                    solucion = hay_barreras1(tablero,'Az',pos_nueva,dado_nuevo)
                    if solucion == True:
                        return True
        else:
            if pos+dado <= 51 or pos > 51:
                for i in range(1,dado+1):
                    casilla = pos+i
                    if casilla != 68:
                        casilla = casilla%68
                    if tablero["estado"][casilla][0] != 0 and tablero["estado"][casilla][0] == tablero["estado"][casilla][1]:
                        return True
                suma_dado = pos+dado
                if suma_dado != 68:
                    suma_dado = suma_dado%68
                if tablero["estado"][suma_dado][0] != 0 and tablero["estado"][suma_dado][1] != 0:
                    return True
            else:
                if pos+dado-51 > 8:
                    return True
                for i in range(pos+1,52):
                    casilla = i
                    if tablero["estado"][casilla][0] != 0 and tablero["estado"][casilla][0] == tablero["estado"][casilla][1]:
                        return True
                if pos+dado>51:
                    dado_nuevo = pos+dado-51
                    pos_nueva = 'V0'
                    solucion = hay_barreras1(tablero,'V',pos_nueva,dado_nuevo)
                    if solucion == True:
                        return True
    return False

# Devuelve la posicion a la que avanza la casilla. Siempre que hay una llamada a
# avanzar tiene que haber una antes a legal.
def avanzar1(tablero,ficha,pos,dado):
    if dado == 6:
        if ficha == 'Am' or ficha == 'R':
            if tablero["estado"]['Am'] == 0 and tablero["estado"]['R'] == 0:
                    dado = 7
        else:
            if tablero["estado"]['Az'] == 0 and tablero["estado"]['V'] == 0:
                    dado = 7
    aux = ultimas_casillas(ficha,pos)
    if pos == (ficha + '8'):
        posicion = pos
    if aux[0] == True:
        posicion = ficha + str(aux[1]+dado)
    else:
        if ficha == 'Am':
            if dado+pos <= 68:
                posicion = dado + pos
            else:
                posicion = ficha + str((dado+pos)%68)
        elif ficha == 'R':
            if pos > 34 or dado+pos <= 34:
                posicion = (dado + pos)%68
                if posicion == 0:
                    posicion = 68
            else:
                posicion = ficha + str((dado+pos)%34)
        elif ficha == 'Az':
            if pos > 17 or dado+pos <= 17:
                posicion = (dado + pos)%68
                if posicion == 0:
                    posicion = 68
            else:
                posicion = ficha + str((dado+pos)%17)
        else:
            if pos > 51 or dado+pos <= 51:
                posicion = (dado + pos)%68
                if posicion == 0:
                    posicion = 68
            else:
                posicion = ficha + str((dado+pos)%51)
    return posicion


#SOLO SON BARRERAS DEL MISMO COLOR NO DEL MISMO JUGADOR
def barreras1(tablero,turno):
    n_barreras = 0
    pos = []
    for i in tablero:
        barrera = 0
        color1 = 0
        color2 = 0
        if type(i)==str:
            pass
        else:
            for j in tablero["estado"][i]:
                if turno == 1:
                    if j == 'Am':
                        barrera += 1
                        color1 += 1
                    elif j == 'R':
                        barrera +=1
                        color2 +=1
                    if barrera == 2 and (color1 == 2 or color2 == 2):
                        n_barreras += 1
                        pos.append(i)
                else:
                    if j == 'Az':
                        barrera += 1
                        color1 += 1
                    elif j == 'V':
                        barrera +=1
                        color2 +=1
                    if barrera == 2 and (color1 == 2 or color2 == 2):
                        n_barreras += 1
                        pos.append(i)
    return n_barreras,pos
                    



  
 
    
 
# Dada una ficha avanza con esta ficha modificando el tablero al avanzarla y 
# devuelve los hijos que se froman al realizar dicho movimiento.
def avan_cambiando_tablero1(tablero,ficha,pos,dado,turno,hijos):
    if legal1(tablero,ficha,pos,dado):
        nueva_posicion = avanzar1(tablero,ficha,pos,dado)
        if tablero["estado"][nueva_posicion][0] == 0 and nueva_posicion not in ['Am8','Az8','R8','V8']:
            tablero_aux = copia_tablero1(tablero)
            tablero_aux["estado"][nueva_posicion][0] = ficha
            if tablero_aux["estado"][pos][1] == ficha:
                tablero_aux["estado"][pos][1] = 0
            else:
                if tablero_aux["estado"][pos][1] == 0: 
                    tablero_aux["estado"][pos][0] = 0
                else:
                    tablero_aux["estado"][pos][0] = tablero_aux["estado"][pos][1]
                    tablero_aux["estado"][pos][1] = 0
            hijo = tablero_aux
            hijos.append(hijo)
        else:
            if turno == 1:
                if nueva_posicion == 'Am8' or nueva_posicion == 'R8':
                    tablero_aux = copia_tablero1(tablero)
                    j = 0
                    while tablero_aux["estado"][nueva_posicion][j] != 0:
                        j += 1
                    tablero_aux["estado"][nueva_posicion][j] = ficha
                    if tablero_aux["estado"][pos][1] != 0 and tablero_aux["estado"][pos][1] == ficha:
                        tablero_aux["estado"][pos][1] = 0
                    elif tablero_aux["estado"][pos][1] != 0:
                        tablero_aux["estado"][pos][0] = tablero_aux["estado"][pos][1]
                        tablero_aux["estado"][pos][1] = 0
                    else:
                        tablero_aux["estado"][pos][0] = 0
                    hijos1 = meter_ficha1(tablero_aux,turno,[])
                    for i in hijos1:
                        hijos.append(i)
                elif tablero["estado"][nueva_posicion][0] == 'Am' or tablero["estado"][nueva_posicion][0] == 'R' or (nueva_posicion in seguros):
                    tablero_aux = copia_tablero1(tablero)
                    tablero_aux["estado"][nueva_posicion][1] = ficha
                    if tablero_aux["estado"][pos][1] != 0 and tablero_aux["estado"][pos][1] == ficha:
                        tablero_aux["estado"][pos][1] = 0
                    elif tablero_aux["estado"][pos][1] != 0:
                        tablero_aux["estado"][pos][0] = tablero_aux["estado"][pos][1]
                        tablero_aux["estado"][pos][1] = 0
                    else:
                        tablero_aux["estado"][pos][0] = 0
                    hijo = tablero_aux
                    hijos.append(hijo)
                else:  
                    tablero_aux = copia_tablero1(tablero)
                    if tablero_aux["estado"][nueva_posicion][0] == 'Az':
                        tablero_aux["estado"]['Az'] += 1
                    else:
                        tablero_aux["estado"]['V'] += 1
                    tablero_aux["estado"][nueva_posicion][0] = ficha
                    if tablero_aux["estado"][pos][1] != 0 and tablero_aux["estado"][pos][1] == ficha:
                        tablero_aux["estado"][pos][1] = 0
                    elif tablero_aux["estado"][pos][1] != 0:
                        tablero_aux["estado"][pos][0] = tablero_aux["estado"][pos][1]
                        tablero_aux["estado"][pos][1] = 0
                    else:
                        tablero_aux["estado"][pos][0] = 0
                    hijos1 = comer1(tablero_aux,turno,[])    
                    for i in hijos1:
                        hijos.append(i)
                    return hijos
            else:
                if nueva_posicion == 'Az8' or nueva_posicion == 'V8':
                    tablero_aux = copia_tablero1(tablero)
                    j = 0
                    while tablero_aux["estado"][nueva_posicion][j] != 0:
                        j += 1
                    tablero_aux["estado"][nueva_posicion][j] = ficha
                    if tablero_aux["estado"][pos][1] != 0 and tablero_aux["estado"][pos][1] == ficha:
                        tablero_aux["estado"][pos][1] = 0
                    elif tablero_aux["estado"][pos][1] != 0:
                        tablero_aux["estado"][pos][0] = tablero_aux["estado"][pos][1]
                        tablero_aux["estado"][pos][1] = 0
                    else:
                        tablero_aux["estado"][pos][0] = 0
                    hijos1 = meter_ficha1(tablero_aux,turno,[])  
                    for i in hijos1:
                        hijos.append(i)
                
                elif tablero["estado"][nueva_posicion][0] == 'Az' or tablero["estado"][nueva_posicion][0] == 'V' or (nueva_posicion in seguros):
                    tablero_aux = copia_tablero1(tablero)
                    tablero_aux["estado"][nueva_posicion][1] = ficha
                    if tablero_aux["estado"][pos][1] != 0 and tablero_aux["estado"][pos][1] == ficha:
                        tablero_aux["estado"][pos][1] = 0
                    elif tablero_aux["estado"][pos][1] != 0:
                        tablero_aux["estado"][pos][0] = tablero_aux["estado"][pos][1]
                        tablero_aux["estado"][pos][1] = 0
                    else:
                        tablero_aux["estado"][pos][0] = 0
                    hijo = tablero_aux
                    hijos.append(hijo)               
                else:
                    tablero_aux = copia_tablero1(tablero)
                    if tablero_aux["estado"][nueva_posicion][0] == 'Am':
                        tablero_aux["estado"]['Am'] += 1
                    else:
                        tablero_aux["estado"]['R'] += 1
                    tablero_aux["estado"][nueva_posicion][0] = ficha
                    if tablero_aux["estado"][pos][1] != 0 and tablero_aux["estado"][pos][1] == ficha:
                        tablero_aux["estado"][pos][1] = 0
                    elif tablero_aux["estado"][pos][1] != 0:
                        tablero_aux["estado"][pos][0] = tablero_aux["estado"][pos][1]
                        tablero_aux["estado"][pos][1] = 0
                    else:
                        tablero_aux["estado"][pos][0] = 0
                    hijos1 = comer1(tablero_aux,turno,[])
                    for i in hijos1:
                        hijos.append(i)
                    return hijos
    return hijos
            
    
                    
        
def meter_ficha1(tablero,turno,hijos1):
    l = hijos_mcts(tablero,10,turno)
    hijos1 = hijos1 + l
    return hijos1

def comer1(tablero,turno,hijos1):
    l = hijos_mcts(tablero,20,turno)
    hijos1 = hijos1 + l
    return hijos1

def sacar5casa1(tablero,ficha):
    comido = 0
    if ficha == 'Am':
        if tablero["estado"][5] == [0,0]:
            tablero["estado"][5] = ['Am',0]
            tablero["estado"]['Am'] = tablero["estado"]['Am']-1
        elif tablero["estado"][5][1] == 0:
            tablero["estado"][5][1] = 'Am'
            tablero["estado"]['Am'] = tablero["estado"]['Am']-1
        else:
            if (tablero["estado"][5][0]=='Am' or tablero["estado"][5][0]=='R') and (tablero["estado"][5][1]=='Am' or tablero["estado"][5][1]=='R'):
                pass
            else:
                if tablero["estado"][5][1] == 'Az' or tablero["estado"][5][1] == 'V':
                    if tablero["estado"][5][1] == 'Az':
                        tablero["estado"]['Az'] = tablero["estado"]['Az'] + 1
                    else:
                        tablero["estado"]['V'] = tablero["estado"]['V'] + 1
                    tablero["estado"][5][1] = 'Am'
                    tablero["estado"]['Am'] = tablero["estado"]['Am']-1
                    comido = 1
                else:
                    if tablero["estado"][5][0] == 'Az':
                        tablero["estado"]['Az'] = tablero["estado"]['Az'] + 1
                    else:
                        tablero["estado"]['V'] = tablero["estado"]['V'] + 1
                    tablero["estado"][5][0] = 'Am'
                    tablero["estado"]['Am'] = tablero["estado"]['Am']-1
                    comido = 1
    elif ficha == 'R':
        if tablero["estado"][39] == [0,0]:
            tablero["estado"][39] = ['R',0]
            tablero["estado"]['R'] = tablero["estado"]['R']-1
        elif tablero["estado"][39][1] == 0:
            tablero["estado"][39][1] = 'R'
            tablero["estado"]['R'] = tablero["estado"]['R']-1
        else:
            if (tablero["estado"][39][0]=='Am' or tablero["estado"][39][0]=='R') and (tablero["estado"][39][1]=='Am' or tablero["estado"][39][1]=='R'):
                pass
            else:
                if tablero["estado"][39][1] == 'Az' or tablero["estado"][39][1] == 'V':
                    if tablero["estado"][39][1] == 'Az':
                        tablero["estado"]['Az'] = tablero["estado"]['Az'] + 1
                    else:
                        tablero["estado"]['V'] = tablero["estado"]['V'] + 1
                    tablero["estado"][39][1] = 'R'
                    tablero["estado"]['R'] = tablero["estado"]['R']-1
                    comido = 1
                else:
                    if tablero["estado"][39][0] == 'Az':
                        tablero["estado"]['Az'] = tablero["estado"]['Az'] + 1
                    else:
                        tablero["estado"]['V'] = tablero["estado"]['V'] + 1
                    tablero["estado"][39][0] = 'R'
                    tablero["estado"]['R'] = tablero["estado"]['R']-1
                    comido = 1
    elif ficha == 'Az':
        if tablero["estado"][22] == [0,0]:
            tablero["estado"][22] = ['Az',0]
            tablero["estado"]['Az'] = tablero["estado"]['Az']-1
        elif tablero["estado"][22][1] == 0:
            tablero["estado"][22][1] = 'Az'
            tablero["estado"]['Az'] = tablero["estado"]['Az']-1
        else:
            if (tablero["estado"][22][0]=='Az' or tablero["estado"][22][0]=='V') and (tablero["estado"][22][1]=='Az' or tablero["estado"][22][1]=='V'):
                pass
            else:
                if tablero["estado"][22][1] == 'Am' or tablero["estado"][22][1] == 'R':
                    if tablero["estado"][22][1] == 'Am':
                        tablero["estado"]['Am'] = tablero["estado"]['Am'] + 1
                    else:
                        tablero["estado"]['R'] = tablero["estado"]['R'] + 1
                    tablero["estado"][22][1] = 'Az'
                    tablero["estado"]['Az'] = tablero["estado"]['Az']-1
                    comido = 1
                else:
                    if tablero["estado"][22][0] == 'Am':
                        tablero["estado"]['Am'] = tablero["estado"]['Am'] + 1
                    else:
                        tablero["estado"]['R'] = tablero["estado"]['R'] + 1
                    tablero["estado"][22][0] = 'Az'
                    tablero["estado"]['Az'] = tablero["estado"]['Az']-1
                    comido = 1
    else:
        if tablero["estado"][56] == [0,0]:
            tablero["estado"][56] = ['V',0]
            tablero["estado"]['V'] = tablero["estado"]['V']-1
        elif tablero["estado"][56][1] == 0:
            tablero["estado"][56][1] = 'V'
            tablero["estado"]['V'] = tablero["estado"]['V']-1
        else:
            if (tablero["estado"][56][0]=='Az' or tablero["estado"][56][0]=='V') and (tablero["estado"][56][1]=='Az' or tablero["estado"][56][1]=='V'):
                pass
            else:
                if tablero["estado"][56][1] == 'Am' or tablero["estado"][56][1] == 'R':
                    if tablero["estado"][56][1] == 'Am':
                        tablero["estado"]['Am'] = tablero["estado"]['Am'] + 1
                    else:
                        tablero["estado"]['R'] = tablero["estado"]['R'] + 1
                    tablero["estado"][56][1] = 'V'
                    tablero["estado"]['V'] = tablero["estado"]['V']-1
                    comido = 1
                else:
                    if tablero["estado"][56][0] == 'Am':
                        tablero["estado"]['Am'] = tablero["estado"]['Am'] + 1
                    else:
                        tablero["estado"]['R'] = tablero["estado"]['R'] + 1
                    tablero["estado"][56][0] = 'V'
                    tablero["estado"]['V'] = tablero["estado"]['V']-1
                    comido = 1
    return tablero,comido


def posiciones_fichas1(tablero,turno):
    posiciones = []
    if turno == 1:
        for i in tablero["estado"]:
            if i == 'Am' or i == 'Az' or i == 'R' or i == 'V' or i == 'Am8' or i == 'Az8' or i == 'R8' or i == 'V8':
                pass
            else:
                for j in tablero["estado"][i]:
                    if j == 'Am':
                        posiciones.append(('Am',i))
                    elif j == 'R':
                        posiciones.append(('R',i))
    else:
        for i in tablero["estado"]:
            if i == 'Am' or i == 'Az' or i == 'R' or i == 'V' or i == 'Am8' or i == 'Az8' or i == 'R8' or i == 'V8':
                pass
            else:
                for j in tablero["estado"][i]:
                    if j == 'Az':
                        posiciones.append(('Az',i))
                    elif j == 'V':
                        posiciones.append(('V',i))
    return posiciones
                        
       

# Devuelve los hijos de una tirada de dado concreta para un jugador y su probabilidad.
def hijos_mcts(tablero,dado,turno):
    posiciones = []
    barreras = []
    hijos = []
    if turno == 1:
        for i in tablero["estado"]:
            barrera = 0
            if i == 'Am' or i == 'Az' or i == 'R' or i == 'V' or i == 'Am8' or i == 'Az8' or i == 'R8' or i == 'V8':
                pass
            else:
                for j in tablero["estado"][i]:
                    if j == 'Am':
                        posiciones.append(('Am',i))
                        barrera += 1
                        if barrera == 2 and len(posiciones) != len(set(posiciones)):
                            if type(i) == str:
                                posiciones.pop(len(posiciones)-1)
                            else:
                                barreras.append(('Am',i))
                                posiciones.pop(len(posiciones)-1)
                    elif j == 'R':
                        posiciones.append(('R',i))
                        barrera += 1
                        if barrera == 2 and len(posiciones) != len(set(posiciones)):
                            if type(i) == str:
                                posiciones.pop(len(posiciones)-1)
                            else:
                                barreras.append(('R',i))
                                posiciones.pop(len(posiciones)-1)
        if dado == 6:
            if tablero["estado"]['Am'] == 0 and tablero["estado"]['R'] == 0:
                dado = 7
            if barreras != []:
                hijos_aux = hijos.copy()
                for h in barreras:
                    hijos = avan_cambiando_tablero1(tablero,h[0],h[1],dado,turno,hijos)
                if hijos_aux == hijos:
                    for j in posiciones:
                        hijos = avan_cambiando_tablero1(tablero,j[0],j[1],dado,turno,hijos)
            else:
                for j in posiciones:
                    hijos = avan_cambiando_tablero1(tablero,j[0],j[1],dado,turno,hijos)
     
        elif dado == 5:
            hijos_aux = hijos.copy()
            tablero_aux =copia_tablero1(tablero)
            if tablero["estado"]['Am'] == 0 and tablero["estado"]['R'] == 0:
                for j in posiciones:
                    hijos = avan_cambiando_tablero1(tablero_aux,j[0],j[1],dado,turno,hijos)
            elif tablero["estado"]['Am'] != 0 and tablero["estado"]['R'] != 0:
                if ((tablero["estado"][5][0]=='Am' or tablero["estado"][5][0]=='R') and (tablero["estado"][5][1]=='Am' or tablero["estado"][5][1]=='R')) and ((tablero["estado"][39][0]=='Am' or tablero["estado"][39][0]=='R') and (tablero["estado"][39][1]=='Am' or tablero["estado"][39][1]=='R')):
                    for j in posiciones:
                        hijos = avan_cambiando_tablero1(tablero_aux,j[0],j[1],dado,turno,hijos)
                elif (tablero["estado"][39][0]=='Am' or tablero["estado"][39][0]=='R') and (tablero["estado"][39][1]=='Am' or tablero["estado"][39][1]=='R'):
                    tablero_aux1 = sacar5casa1(tablero_aux,'Am')
                    if tablero_aux1[1] == 1:
                        hijos1 = comer1(tablero_aux1[0],turno,[])
                        for i in hijos1:
                            hijos.append(i)
                    else:
                        hijo = tablero_aux1[0]
                        hijos = hijos + [hijo]
                elif (tablero["estado"][5][0]=='Am' or tablero["estado"][5][0]=='R') and (tablero["estado"][5][1]=='Am' or tablero["estado"][5][1]=='R'):
                    tablero_aux2 = sacar5casa1(tablero_aux,'R')
                    if tablero_aux2[1] == 1:
                        hijos1 = comer1(tablero_aux2[0],turno,[])
                        for i in hijos1:
                            hijos.append(i)
                    else:
                        hijo = tablero_aux2[0]
                        hijos = hijos + [hijo]
                else:
                    tablero_aux1 = sacar5casa1(tablero_aux,'Am')
                    tablero_aux = copia_tablero1(tablero)
                    tablero_aux2 = sacar5casa1(tablero_aux,'R')
                    if tablero_aux1[1] == 1 and tablero_aux2[1] == 1:
                        hijos1 = comer1(tablero_aux1[0],turno,[])
                        for i in hijos1:
                            hijos.append(i)
                        hijos1 = comer1(tablero_aux2[0],turno,[])
                        for i in hijos1:
                            hijos.append(i)
                    elif tablero_aux1[1] == 1:
                        hijos1 = comer1(tablero_aux1[0],turno,[])
                        for i in hijos1:
                            hijos.append(i)
                        hijo = tablero_aux2[0]
                        hijos = hijos + [hijo]
                    elif tablero_aux2[1] == 1:
                        hijo = tablero_aux1[0]
                        hijos = hijos + [hijo]
                        hijos1 = comer1(tablero_aux2[0],turno,[])
                        for i in hijos1:
                            hijos.append(i)
                    else:
                        hijo1 = tablero_aux1[0]
                        hijo2 = tablero_aux2[0]
                        l = [hijo1,hijo2]
                        hijos = hijos + l
            elif tablero["estado"]['Am'] != 0:
                if (tablero["estado"][5][0]=='Am' or tablero["estado"][5][0]=='R') and (tablero["estado"][5][1]=='Am' or tablero["estado"][5][1]=='R'):
                    for j in posiciones:
                        hijos = avan_cambiando_tablero1(tablero_aux,j[0],j[1],dado,turno,hijos)
                else:
                    tablero_aux1 = sacar5casa1(tablero_aux,'Am')
                    if tablero_aux1[1] == 1:
                        hijos1 = comer1(tablero_aux1[0],turno,[])
                        for i in hijos1:
                            hijos.append(i)
                    else:
                        hijo = tablero_aux1[0]
                        hijos = hijos + [hijo]
            else:
                if (tablero["estado"][39][0]=='Am' or tablero["estado"][39][0]=='R') and (tablero["estado"][39][1]=='Am' or tablero["estado"][39][1]=='R'):
                    for j in posiciones:
                        hijos = avan_cambiando_tablero1(tablero_aux,j[0],j[1],dado,turno,hijos)
                else:
                    tablero_aux1 = sacar5casa1(tablero_aux,'R')
                    if tablero_aux1[1] == 1:
                        hijos1 = comer1(tablero_aux1[0],turno,[])
                        for i in hijos1:
                            hijos.append(i)
                    else:
                        hijo = tablero_aux1[0]
                        hijos = hijos + [hijo]
            if hijos_aux == hijos:
                for j in posiciones:
                    hijos = avan_cambiando_tablero1(tablero_aux,j[0],j[1],dado,turno,hijos)
        else:
            for j in posiciones:
                hijos = avan_cambiando_tablero1(tablero,j[0],j[1],dado,turno,hijos)
        if hijos == []:  
            hijo = tablero
            hijos.append(hijo)
    if turno == 2:
        for i in tablero["estado"]:
            barrera = 0
            if i == 'Am' or i == 'Az' or i == 'R' or i == 'V' or i == 'Am8' or i == 'Az8' or i == 'R8' or i == 'V8':
                pass
            else:
                for j in tablero["estado"][i]:
                    if j == 'Az':
                        posiciones.append(('Az',i))
                        barrera += 1
                        if barrera == 2 and len(posiciones) != len(set(posiciones)):
                            if type(i) == str:
                                posiciones.pop(len(posiciones)-1)
                            else:
                                barreras.append(('Az',i))
                                posiciones.pop(len(posiciones)-1)
                    elif j == 'V':
                        posiciones.append(('V',i))
                        barrera += 1
                        if barrera == 2 and len(posiciones) != len(set(posiciones)):
                            if type(i) == str:
                                posiciones.pop(len(posiciones)-1)
                            else:
                                barreras.append(('V',i))
                                posiciones.pop(len(posiciones)-1)
            
        if dado == 6:
            if tablero["estado"]['Az'] == 0 and tablero["estado"]['V'] == 0:
                dado = 7
            if barreras != []:
                hijos_aux = hijos.copy()
                for h in barreras:
                    hijos = avan_cambiando_tablero1(tablero,h[0],h[1],dado,turno,hijos)
                if hijos_aux == hijos:
                    for j in posiciones:
                        hijos = avan_cambiando_tablero1(tablero,j[0],j[1],dado,turno,hijos)
            else:
                for j in posiciones:
                    hijos = avan_cambiando_tablero1(tablero,j[0],j[1],dado,turno,hijos)  
        elif dado == 5:
            hijos_aux = hijos.copy()
            tablero_aux = copia_tablero1(tablero)
            if tablero["estado"]['Az'] == 0 and tablero["estado"]['V'] == 0:
                for j in posiciones:
                    hijos = avan_cambiando_tablero1(tablero_aux,j[0],j[1],dado,turno,hijos)
                    
            elif tablero["estado"]['Az'] != 0 and tablero["estado"]['V'] != 0:
                if ((tablero["estado"][22][0]=='Az' or tablero["estado"][22][0]=='V') and (tablero["estado"][22][1]=='Az' or tablero["estado"][22][1]=='V')) and ((tablero["estado"][56][0]=='Az' or tablero["estado"][56][0]=='V') and (tablero["estado"][56][1]=='Az' or tablero["estado"][56][1]=='V')):
                    for j in posiciones:
                        hijos = avan_cambiando_tablero1(tablero_aux,j[0],j[1],dado,turno,hijos)
                elif (tablero["estado"][56][0]=='Az' or tablero["estado"][56][0]=='V') and (tablero["estado"][56][1]=='Az' or tablero["estado"][56][1]=='V'):
                    tablero_aux1 = sacar5casa1(tablero_aux,'Az')
                    if tablero_aux1[1] == 1:
                        hijos1 = comer1(tablero_aux1[0],turno,[])
                        for i in hijos1:
                            hijos.append(i)
                    else:
                        hijo = tablero_aux1[0]
                        hijos = hijos + [hijo]
                elif (tablero["estado"][22][0]=='Az' or tablero["estado"][22][0]=='V') and (tablero["estado"][22][1]=='Az' or tablero["estado"][22][1]=='V'):
                    tablero_aux2 = sacar5casa1(tablero_aux,'V')
                    if tablero_aux2[1] == 1:
                       hijos1 = comer1(tablero_aux2[0],turno,[])
                       for i in hijos1:
                           hijos.append(i)
                    else:
                       hijo = tablero_aux2[0]
                       hijos = hijos + [hijo]
                else:
                    tablero_aux1 = sacar5casa1(tablero_aux,'Az')
                    tablero_aux = copia_tablero1(tablero)
                    tablero_aux2 = sacar5casa1(tablero_aux,'V')
                    if tablero_aux1[1] == 1 and tablero_aux2[1] == 1:
                        hijos1 = comer1(tablero_aux1[0],turno,[])
                        for i in hijos1:
                            hijos.append(i)
                        hijos1 = comer1(tablero_aux2[0],turno,[])
                        for i in hijos1:
                            hijos.append(i)
                    elif tablero_aux1[1] == 1:
                        hijos1 = comer1(tablero_aux1[0],turno,[])
                        for i in hijos1:
                            hijos.append(i)
                        hijo = tablero_aux2[0]
                        hijos = hijos + [hijo]
                    elif tablero_aux2[1] == 1:
                        hijo = tablero_aux1[0]
                        hijos = hijos + [hijo]
                        hijos1 = comer1(tablero_aux2[0],turno,[])
                        for i in hijos1:
                            hijos.append(i)
                    else:
                        hijo1 = tablero_aux1[0]
                        hijo2 = tablero_aux2[0]
                        l = [hijo1,hijo2]
                        hijos = hijos + l
            elif tablero["estado"]['Az'] != 0:
                if (tablero["estado"][22][0]=='Az' or tablero["estado"][22][0]=='V') and (tablero["estado"][22][1]=='Az' or tablero["estado"][22][1]=='V'):
                    for j in posiciones:
                        hijos = avan_cambiando_tablero1(tablero_aux,j[0],j[1],dado,turno,hijos)
                else:
                    tablero_aux1 = sacar5casa1(tablero_aux,'Az')
                    if tablero_aux1[1] == 1:
                        hijos1 = comer1(tablero_aux1[0],turno,[])
                        for i in hijos1:
                            hijos.append(i)
                    else:
                        hijo = tablero_aux1[0]
                        hijos = hijos + [hijo]
            else:
                if (tablero["estado"][56][0]=='Az' or tablero["estado"][56][0]=='V') and (tablero["estado"][56][1]=='Az' or tablero["estado"][56][1]=='V'):
                    for j in posiciones:
                        hijos = avan_cambiando_tablero1(tablero_aux,j[0],j[1],dado,turno,hijos)
                else:
                    tablero_aux1 = sacar5casa1(tablero_aux,'V')
                    if tablero_aux1[1] == 1:
                        hijos1 = comer1(tablero_aux1[0],turno,[])
                        for i in hijos1:
                            hijos.append(i)
                    else:
                        hijo = tablero_aux1[0]
                        hijos = hijos + [hijo]
            if hijos_aux == hijos:
                for j in posiciones:
                    hijos = avan_cambiando_tablero1(tablero_aux,j[0],j[1],dado,turno,hijos)
        else:
            for j in posiciones:
                hijos = avan_cambiando_tablero1(tablero,j[0],j[1],dado,turno,hijos)
        if hijos == []:    
            hijo = tablero
            hijos.append(hijo)
    return hijos

def ficha_mover_6_mcts(tablero,turno):
    posiciones = [] 
    barrera = barreras1(tablero,turno)
    if barrera[0] == 0:
        pos_fichas = posiciones_fichas1(tablero, turno)
        for i in pos_fichas:
            if legal1(tablero, i[0], i[1], 6):
                posiciones.append(i)
    else:
        for i in barrera[1]:
            if legal1(tablero, tablero[i][0], i, 6):
                posiciones.append((tablero[i][0],i))
        if posiciones == []:
            pos_fichas = posiciones_fichas1(tablero, turno)
            for i in pos_fichas:
                if legal1(tablero, i[0], i[1], 6):
                    posiciones.append(i)
    return posiciones
                                 


def tirar_dados():
    tirada1 = random.choice([1,2,3,4,5,6])
    if tirada1 >5:
        tirada2 = random.choice([1,2,3,4,5,6])
        if tirada2 >5:
            tirada3 = random.choice([1,2,3,4,5,6])
            tirada_final = tirada1 + tirada2 + tirada3
        else:
            tirada_final = tirada1 + tirada2
    else:
        tirada_final = tirada1
    return tirada_final


def todos_hijos_montecarlo(tablero,turno,tirada):
    if tirada < 6:
        hijos_finales = hijos_mcts(tablero,tirada,turno)
    elif tirada < 12:
        lista_hijos = hijos_mcts(tablero,6,turno)
        hijos7 = []
        for i in lista_hijos:
            hijos1 =[]
            hijos1 = hijos_mcts(i,tirada-6,turno)
            hijos7 = hijos7 + hijos1
        hijos_finales = hijos7
    elif tirada < 18:
        lista_hijos = hijos_mcts(tablero,6,turno)
        for i in lista_hijos:
            hijos_doble6 = hijos_mcts(i,6,turno)
        hijos8 = []
        for i in hijos_doble6:
            hijos1 =[]
            hijos1= hijos_mcts(i,tirada-12,turno)
            hijos8 = hijos8 +hijos1
        hijos_finales = hijos8
    else:
        hijos5 = []
        lista_hijos = hijos_mcts(tablero,6,turno)
        for i in lista_hijos:
            posiciones = ficha_mover_6_mcts(i,turno)
            for j in posiciones:
                tableros_posibles = avan_cambiando_tablero1(i, j[0], j[1], 6, turno, [])
    
                posicion_nueva = avanzar1(i, j[0], j[1], 6)
                if posicion_nueva == 'Am8' or posicion_nueva == 'R8' or posicion_nueva == 'Az8' or posicion_nueva == 'V8':
                    for k in tableros_posibles:
                        hijos5.append(k)
                else:
                    if turno == 1 and ((i["estado"][posicion_nueva][0] != 'Az' and i["estado"][posicion_nueva][0] != 'V') or (posicion_nueva in seguros)):
                            if posicion_nueva in seguros:
                                if i["estado"][posicion_nueva][0] != 0:
                                    for k in tableros_posibles:
                                        tablero_aux = k
                                        tablero_aux["estado"][posicion_nueva][1] =0
                                        tablero_aux["estado"][j[0]] = tablero_aux["estado"][j[0]] +1
                                        hijos5.append(tablero_aux)
                                else:
                                    for k in tableros_posibles:
                                        tablero_aux = k
                                        tablero_aux["estado"][posicion_nueva][0] =0
                                        tablero_aux["estado"][j[0]] = tablero_aux["estado"][j[0]] +1
                                        hijos5.append(tablero_aux)
                            elif i["estado"][posicion_nueva][0] == 'Am' or i["estado"][posicion_nueva][0] == 'R':
                                for k in tableros_posibles:
                                    tablero_aux = k
                                    tablero_aux["estado"][posicion_nueva][1] =0
                                    tablero_aux["estado"][j[0]] = tablero_aux["estado"][j[0]] +1
                                    hijos5.append(tablero_aux)
                            else:
                                for k in tableros_posibles:
                                    tablero_aux = k
                                    tablero_aux["estado"][posicion_nueva][0] =0
                                    tablero_aux["estado"][j[0]] = tablero_aux["estado"][j[0]] +1                      
                                    hijos5.append(tablero_aux)
                    elif turno == 2 and ((i["estado"][posicion_nueva][0] != 'Am' and i["estado"][posicion_nueva][0] != 'R') or (posicion_nueva in seguros)):
                        if posicion_nueva in seguros:
                                if i["estado"][posicion_nueva][0] != 0:
                                    for k in tableros_posibles:
                                        tablero_aux = k
                                        tablero_aux["estado"][posicion_nueva][1] =0
                                        tablero_aux["estado"][j[0]] = tablero_aux["estado"][j[0]] +1
                                        hijos5.append(tablero_aux)
                                else:
                                    for k in tableros_posibles:
                                        tablero_aux = k
                                        tablero_aux["estado"][posicion_nueva][0] =0
                                        tablero_aux["estado"][j[0]] = tablero_aux["estado"][j[0]] +1
                                        hijos5.append(tablero_aux)   
                        elif i["estado"][posicion_nueva][0] == 'Az' or i["estado"][posicion_nueva][0] == 'V':
                                for k in tableros_posibles:
                                    tablero_aux = k
                                    tablero_aux["estado"][posicion_nueva][1] =0
                                    tablero_aux["estado"][j[0]] = tablero_aux["estado"][j[0]] +1
                                    hijos5.append(tablero_aux)
                        else:
                            for k in tableros_posibles:
                                tablero_aux = k
                                tablero_aux["estado"][posicion_nueva][0] =0
                                tablero_aux["estado"][j[0]] = tablero_aux["estado"][j[0]] +1
                                hijos5.append(tablero_aux)
                    else:
                        for k in tableros_posibles:
                            if k["estado"][posicion_nueva][0] == j[0]:
                                tablero_aux = k
                                tablero_aux["estado"][posicion_nueva][0] =0
                                tablero_aux["estado"][j[0]] = tablero_aux["estado"][j[0]] +1
                                hijos5.append(tablero_aux)                    
        hijos_finales = hijos5
    for i in hijos_finales:
         if i == tablero:
             tablero_aux = copia_tablero1(i)
             tablero["hijos"].append(tablero_aux)
             tablero_aux["padre"] = tablero
         else:
             tablero["hijos"].append(i)
             i["padre"] = tablero
    if hijos_finales == []:
        tablero_aux = copia_tablero1(tablero)
        tablero["hijos"].append(tablero_aux)
        tablero_aux["padre"] = tablero
        hijos_finales.append(tablero_aux)
    return hijos_finales


def terminal1(tablero):
    if (tablero["estado"]['Am8'] == ['Am','Am','Am','Am'] and tablero["estado"]['R8'] == ['R','R','R','R']):
        return True
    elif (tablero["estado"]['Az8'] == ['Az','Az','Az','Az'] and tablero["estado"]['V8'] == ['V','V','V','V']):
        return True
    return False

def ganador(tablero):
    if (tablero["estado"]['Am8'] == ['Am','Am','Am','Am'] and tablero["estado"]['R8'] == ['R','R','R','R']):
        return 1
    elif (tablero["estado"]['Az8'] == ['Az','Az','Az','Az'] and tablero["estado"]['V8'] == ['V','V','V','V']):
        return 2

def numero_casillas_faltan1(tablero,jugador):
    casillas = 0
    if jugador == 1:
        for i in tablero["estado"]:
            if type(tablero["estado"][i]) == int:
                if i == 'Am':
                    casillas = casillas +71*tablero["estado"]['Am']
                elif i == 'R':
                    casillas = casillas +71*tablero["estado"]['R']
            else:
                for j in tablero["estado"][i]:
                    if j == 'Am':
                        if type(i) == str:
                            casillas = casillas + 8 - int(i[2])
                        else:
                            casillas = casillas + 75 - i
                    elif j == 'R':
                        if type(i) == str:
                            casillas = casillas + 8 - int(i[1])
                        elif i <= 34:
                            casillas = casillas + 42 -i
                        else:
                            casillas = casillas  + 75 - (i-34)
    elif jugador == 2:
        for i in tablero["estado"]:
            if type(tablero["estado"][i]) == int:
                if i == 'Az':
                    casillas = casillas +71*tablero["estado"]['Az']
                elif i == 'V':
                    casillas = casillas +71*tablero["estado"]['V']
            else:
                for j in tablero[i]:
                    if j == 'Az':
                        if type(i) == str:
                            casillas = casillas + 8 - int(i[2])
                        elif i <= 17:
                            casillas = casillas + 25 -i
                        else:
                            casillas = casillas  + 75 - (i-17)
                    elif j == 'V':
                        if type(i) == str:
                            casillas = casillas + 8 - int(i[1])
                        elif i <= 51:
                            casillas = casillas + 59 -i
                        else:
                            casillas = casillas  + 75 - (i-51)
    return casillas
                    
                    
def casillas_zona1(tablero,jugador):
    contador = 0
    if jugador == 1:
        for i in ['Am1','Am2','Am3','Am4','Am5','Am6','Am7','Am8','R1','R2','R3','R4','R5','R6','R7','R8']:
            for j in tablero["estado"][i]:
                if j != 0:
                    contador +=1
    elif jugador == 2:
        for i in ['Az1','Az2','Az3','Az4','Az5','Az6','Az7','Az8','V1','V2','V3','V4','V5','V6','V7','V8']:
            for j in tablero["estado"][i]:
                if j != 0:
                    contador +=1
    return contador
                    


        

def eliminar(lista):
    for i in lista:
        i["hijos"] = []           

def montecarlo(tablero,iteraciones,turno,tirada):
    tableros_creados = []
    tablero_aux = deepcopy(tablero)
    tablero_aux["visitado"] = True
    todos_hijos_montecarlo(tablero_aux, turno,tirada)
    for i in tablero_aux["hijos"]:
        tableros_creados.append(i)
    for iteracion in range(iteraciones):
        hoja = expandir(tablero_aux,turno,tableros_creados)
        resultado = simulacion(hoja[0],hoja[1],tableros_creados)
        retroprogramacion(hoja[0],resultado,turno)
    hijo_elegido = escoger_hijo(tablero_aux,turno)
    eliminar(tableros_creados)
    return hijo_elegido

def expandir(tablero,turno,tableros_creados):
    i = 0
    if  turno == 1:
        contrario = 2
    else:
        contrario = 1
    while todos_hijos_visitados(tablero,turno,tableros_creados):
           if i%2 == 0:    
                tablero = mejor_uct(tablero,turno)
                i += 1
           else:
               tablero = mejor_uct(tablero,contrario)
               i += 1

    tablero = no_visitados(tablero,turno) or tablero
    if i%2 ==1:
        turno  = contrario
    return tablero,turno
        

def simulacion(tablero,turno,tableros_creados):
    i = 0
    if  turno == 1:
        contrario = 2
    else:
        contrario = 1
    while not terminal1(tablero):
        if i%2 == 0:
            tirada = tirar_dados()
            tablero = simulacion_aleatoria(tablero, contrario,tirada,tableros_creados) 
            i +=1
        else:
            tirada = tirar_dados()
            tablero = simulacion_aleatoria(tablero,turno,tirada,tableros_creados)
            i+=1   
    return ganador(tablero)

def retroprogramacion(tablero,resultado,jugador):
    while tablero is not None:
        actualizar_ganancias(tablero,resultado,jugador)
        tablero = tablero["padre"]
        
def actualizar_ganancias(tablero, resultado,jugador):
    tablero["estadisticas"]["visitas"] += 1
    if jugador == 1:
        if resultado == 2:
            resultado = 0
    else:
        if resultado == 1:
            resultado = 0
        else:
            resultado = 1
    tablero["estadisticas"]["ganancias"] += resultado

def escoger_hijo(tablero,jugador):
    max_visitas = float('-inf')
    hijo_escogido = None
    
    for hijo in tablero["hijos"]:
        if hijo["estadisticas"]["visitas"] >= max_visitas:
            max_visitas = hijo["estadisticas"]["visitas"]
            hijo_escogido = hijo
    return hijo_escogido

def todos_hijos_visitados(tablero,jugador,tableros_creados):
    if tablero["hijos"] == []:
        tirada = tirar_dados()
        todos_hijos_montecarlo(tablero, jugador,tirada) 
        for i in tablero["hijos"]:
            tableros_creados.append(i)
    if terminal1(tablero):
        return False
    else:
        for hijo in tablero["hijos"]:
            if hijo["visitado"] == False:
                return False
    return True


def no_visitados(tablero,jugador):
    no_visitados = []
    for hijo in tablero["hijos"]:
        if hijo["visitado"] == False:
            no_visitados.append(hijo)
    if no_visitados ==[]:
        escogido = tablero
    else:
        escogido = random.choice(no_visitados)
        escogido["visitado"] = True
    return escogido

   
def mejor_uct(tablero,jugador):
    max_uct = float('-inf')
    hijo_escogido = None
    c = sqrt(2)
    visitas_tablero = tablero["estadisticas"]["visitas"]
    for hijo in tablero["hijos"]:
        w = hijo["estadisticas"]["ganancias"]
        n = hijo["estadisticas"]["visitas"]
        uct = (w/n)+(c*sqrt(log(visitas_tablero)/n))
        if (uct>=max_uct):
                max_uct = uct
                hijo_escogido = hijo
    return hijo_escogido
    

def simulacion_aleatoria(tablero,jugador,tirada,tableros_creados):
    todos_hijos_montecarlo(tablero,jugador,tirada)
    for i in tablero["hijos"]:
        tableros_creados.append(i)
    hijo = random.choice(tablero["hijos"])
    return hijo



iteraciones_normal = [(1,1),(1,2),(2,1),(2,2)]
iteraciones_dif_tipos = [(1,1),(1,2),(1,3),(2,1),(2,2),(2,3)]


def jugar_expectiminimax_montecarlo(tablero,profundidad,iteraciones):
    jugadas =0
    tablero2 = tablero
    tablero1 = tablero
    while not(terminal(tablero2)) and not(terminal(tablero1)):
        tirada = tirar_dados()
        a,tablero1 = expectiminimax(tablero2, profundidad, 1)
        jugadas = jugadas +1
        ultimo = tablero1
        if not(terminal(tablero1)):
            tirada = tirar_dados()
            tablero1 = crear_tablero(tablero1)
            tablero2 = montecarlo(tablero1, iteraciones, 2,tirada)
            tablero2 = tablero2["estado"]
            jugadas = jugadas +1
            ultimo = tablero2
            tablero1 = tablero1["estado"]
    if (ultimo['Am8'] == ['Am','Am','Am','Am'] and ultimo['R8'] == ['R','R','R','R']):
        ganador = 1
    else:
        ganador = 2
    return ultimo,jugadas,profundidad, iteraciones,ganador


def jugar_montecarlo_expectiminimax(tablero,profundidad,iteraciones):
    jugadas =0
    tablero2 = tablero
    tablero1 = tablero
    while not(terminal(tablero2)) and not(terminal(tablero1)):
        tirada = tirar_dados()
        tablero2 = crear_tablero(tablero2)
        tablero1 = montecarlo(tablero2, iteraciones, 1,tirada)
        tablero1 = tablero1["estado"]
        jugadas = jugadas +1
        ultimo = tablero1
        tablero2 = tablero2["estado"]
        if not(terminal(tablero1)):
            a,tablero2 = expectiminimax(tablero1, profundidad, 2)
            jugadas = jugadas +1
            ultimo = tablero2
    if (ultimo['Am8'] == ['Am','Am','Am','Am'] and ultimo['R8'] == ['R','R','R','R']):
        ganador = 1
    else:
        ganador = 2
    return ultimo,jugadas,profundidad, iteraciones,ganador







iteraciones_montecarlo = [(1,1),(5,1),(15,1),(30,1),(50,1),(100,1),(5,5),(15,5),(30,5),(50,5),(100,5),(15,15),(30,15),(50,15),(100,15),(30,30),(50,30),(100,30),(50,50),(100,50),(100,100)]


tableros = [tablero_inicial,tablero_2,tablero_3,tablero_4,tablero_5,tablero_6,tablero_7,tablero_8,tablero_9,tablero_10,tablero_aleatorio1,tablero_aleatorio2,tablero_aleatorio3,tablero_aleatorio4,tablero_aleatorio5,tablero_aleatorio6,tablero_aleatorio7,tablero_aleatorio8,tablero_aleatorio9,tablero_aleatorio10,tablero_aleatorio11,tablero_aleatorio12,tablero_aleatorio13,tablero_aleatorio14,tablero_aleatorio15,tablero_aleatorio16,tablero_aleatorio17,tablero_aleatorio18,tablero_aleatorio19,tablero_aleatorio20]


def tiempo_medio_poda(tableros,profundidad):
    tableros_aux = deepcopy(tableros)
    tiempo = 0
    for i in tableros_aux:
        inicio = time.time()
        expectiminimax(i, profundidad, 1)
        fin = time.time()
        duracion = fin -inicio
        tiempo += duracion
    return tiempo/30

def tiempo_medio_montecarlo(tableros,iteraciones):
    tiempo = 0
    for i in tableros:
        i = crear_tablero(i)
        inicio = time.time()
        montecarlo(i, iteraciones,1,random.choice([1,2,3,4,5,6]))
        fin = time.time()
        duracion = fin -inicio
        print(duracion)
        tiempo += duracion
    return tiempo/30


prof_iter = [(1,1),(1,335),(2,1),(2,335)]


'''
tiempo_medio_expecti_prof 2
245.88291989628263

tiempo_medio_mcts_335
261.8657391309738

'''


'''
for j in iteraciones_tab_inic:
    inicio = time.time()
    resultado = jugar_expectiminimax_montecarlo(tablero_inicial, j[0], j[1])
    fin = time.time()
    duracion = fin-inicio
    print(resultado,duracion)
'''

    



